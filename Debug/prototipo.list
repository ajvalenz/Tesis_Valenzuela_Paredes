
prototipo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006a60  08006a60  00016a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd0  08006bd0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bd8  08006bd8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bdc  08006bdc  00016bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000485c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200048d8  200048d8  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002162e  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000439e  00000000  00000000  000416da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  00045a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001448  00000000  00000000  00047070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024caf  00000000  00000000  000484b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ad21  00000000  00000000  0006d167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d64db  00000000  00000000  00087e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015e363  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e64  00000000  00000000  0015e3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a48 	.word	0x08006a48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08006a48 	.word	0x08006a48

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2uiz>:
 80009bc:	004a      	lsls	r2, r1, #1
 80009be:	d211      	bcs.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d211      	bcs.n	80009ea <__aeabi_d2uiz+0x2e>
 80009c6:	d50d      	bpl.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d40e      	bmi.n	80009f0 <__aeabi_d2uiz+0x34>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	fa23 f002 	lsr.w	r0, r3, r2
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d102      	bne.n	80009f6 <__aeabi_d2uiz+0x3a>
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	4770      	bx	lr
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	4770      	bx	lr

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b96e 	b.w	8000d90 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468c      	mov	ip, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8083 	bne.w	8000be2 <__udivmoddi4+0x116>
 8000adc:	428a      	cmp	r2, r1
 8000ade:	4617      	mov	r7, r2
 8000ae0:	d947      	bls.n	8000b72 <__udivmoddi4+0xa6>
 8000ae2:	fab2 f282 	clz	r2, r2
 8000ae6:	b142      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae8:	f1c2 0020 	rsb	r0, r2, #32
 8000aec:	fa24 f000 	lsr.w	r0, r4, r0
 8000af0:	4091      	lsls	r1, r2
 8000af2:	4097      	lsls	r7, r2
 8000af4:	ea40 0c01 	orr.w	ip, r0, r1
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbbc f6f8 	udiv	r6, ip, r8
 8000b04:	fa1f fe87 	uxth.w	lr, r7
 8000b08:	fb08 c116 	mls	r1, r8, r6, ip
 8000b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b10:	fb06 f10e 	mul.w	r1, r6, lr
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b1e:	f080 8119 	bcs.w	8000d54 <__udivmoddi4+0x288>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8116 	bls.w	8000d54 <__udivmoddi4+0x288>
 8000b28:	3e02      	subs	r6, #2
 8000b2a:	443b      	add	r3, r7
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3310 	mls	r3, r8, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b40:	45a6      	cmp	lr, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	193c      	adds	r4, r7, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8105 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b4e:	45a6      	cmp	lr, r4
 8000b50:	f240 8102 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b54:	3802      	subs	r0, #2
 8000b56:	443c      	add	r4, r7
 8000b58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5c:	eba4 040e 	sub.w	r4, r4, lr
 8000b60:	2600      	movs	r6, #0
 8000b62:	b11d      	cbz	r5, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c5 4300 	strd	r4, r3, [r5]
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	b902      	cbnz	r2, 8000b76 <__udivmoddi4+0xaa>
 8000b74:	deff      	udf	#255	; 0xff
 8000b76:	fab2 f282 	clz	r2, r2
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d150      	bne.n	8000c20 <__udivmoddi4+0x154>
 8000b7e:	1bcb      	subs	r3, r1, r7
 8000b80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b84:	fa1f f887 	uxth.w	r8, r7
 8000b88:	2601      	movs	r6, #1
 8000b8a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b8e:	0c21      	lsrs	r1, r4, #16
 8000b90:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b98:	fb08 f30c 	mul.w	r3, r8, ip
 8000b9c:	428b      	cmp	r3, r1
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ba0:	1879      	adds	r1, r7, r1
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0xe2>
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	f200 80e9 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1ac9      	subs	r1, r1, r3
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bbc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x10c>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x10a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80d9 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e7bf      	b.n	8000b62 <__udivmoddi4+0x96>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0x12e>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	f000 80b1 	beq.w	8000d4e <__udivmoddi4+0x282>
 8000bec:	2600      	movs	r6, #0
 8000bee:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	4631      	mov	r1, r6
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f683 	clz	r6, r3
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d14a      	bne.n	8000c98 <__udivmoddi4+0x1cc>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0x140>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80b8 	bhi.w	8000d7c <__udivmoddi4+0x2b0>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	468c      	mov	ip, r1
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d0a8      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000c1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c1e:	e7a5      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000c20:	f1c2 0320 	rsb	r3, r2, #32
 8000c24:	fa20 f603 	lsr.w	r6, r0, r3
 8000c28:	4097      	lsls	r7, r2
 8000c2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c32:	40d9      	lsrs	r1, r3
 8000c34:	4330      	orrs	r0, r6
 8000c36:	0c03      	lsrs	r3, r0, #16
 8000c38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c3c:	fa1f f887 	uxth.w	r8, r7
 8000c40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb06 f108 	mul.w	r1, r6, r8
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x19c>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c5a:	f080 808d 	bcs.w	8000d78 <__udivmoddi4+0x2ac>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 808a 	bls.w	8000d78 <__udivmoddi4+0x2ac>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b281      	uxth	r1, r0
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb00 f308 	mul.w	r3, r0, r8
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x1c4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c86:	d273      	bcs.n	8000d70 <__udivmoddi4+0x2a4>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d971      	bls.n	8000d70 <__udivmoddi4+0x2a4>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4439      	add	r1, r7
 8000c90:	1acb      	subs	r3, r1, r3
 8000c92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c96:	e778      	b.n	8000b8a <__udivmoddi4+0xbe>
 8000c98:	f1c6 0c20 	rsb	ip, r6, #32
 8000c9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000ca0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ca4:	431c      	orrs	r4, r3
 8000ca6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000caa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cb2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	0c3b      	lsrs	r3, r7, #16
 8000cba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cbe:	fa1f f884 	uxth.w	r8, r4
 8000cc2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cca:	fb09 fa08 	mul.w	sl, r9, r8
 8000cce:	458a      	cmp	sl, r1
 8000cd0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x220>
 8000cda:	1861      	adds	r1, r4, r1
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce0:	d248      	bcs.n	8000d74 <__udivmoddi4+0x2a8>
 8000ce2:	458a      	cmp	sl, r1
 8000ce4:	d946      	bls.n	8000d74 <__udivmoddi4+0x2a8>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4421      	add	r1, r4
 8000cec:	eba1 010a 	sub.w	r1, r1, sl
 8000cf0:	b2bf      	uxth	r7, r7
 8000cf2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cfe:	fb00 f808 	mul.w	r8, r0, r8
 8000d02:	45b8      	cmp	r8, r7
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x24a>
 8000d06:	19e7      	adds	r7, r4, r7
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d22e      	bcs.n	8000d6c <__udivmoddi4+0x2a0>
 8000d0e:	45b8      	cmp	r8, r7
 8000d10:	d92c      	bls.n	8000d6c <__udivmoddi4+0x2a0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4427      	add	r7, r4
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	eba7 0708 	sub.w	r7, r7, r8
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	454f      	cmp	r7, r9
 8000d24:	46c6      	mov	lr, r8
 8000d26:	4649      	mov	r1, r9
 8000d28:	d31a      	bcc.n	8000d60 <__udivmoddi4+0x294>
 8000d2a:	d017      	beq.n	8000d5c <__udivmoddi4+0x290>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x27a>
 8000d2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d32:	eb67 0701 	sbc.w	r7, r7, r1
 8000d36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d3a:	40f2      	lsrs	r2, r6
 8000d3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d40:	40f7      	lsrs	r7, r6
 8000d42:	e9c5 2700 	strd	r2, r7, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e70b      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6fd      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d5c:	4543      	cmp	r3, r8
 8000d5e:	d2e5      	bcs.n	8000d2c <__udivmoddi4+0x260>
 8000d60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d64:	eb69 0104 	sbc.w	r1, r9, r4
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7df      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e7d2      	b.n	8000d16 <__udivmoddi4+0x24a>
 8000d70:	4660      	mov	r0, ip
 8000d72:	e78d      	b.n	8000c90 <__udivmoddi4+0x1c4>
 8000d74:	4681      	mov	r9, r0
 8000d76:	e7b9      	b.n	8000cec <__udivmoddi4+0x220>
 8000d78:	4666      	mov	r6, ip
 8000d7a:	e775      	b.n	8000c68 <__udivmoddi4+0x19c>
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e74a      	b.n	8000c16 <__udivmoddi4+0x14a>
 8000d80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d84:	4439      	add	r1, r7
 8000d86:	e713      	b.n	8000bb0 <__udivmoddi4+0xe4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	443c      	add	r4, r7
 8000d8c:	e724      	b.n	8000bd8 <__udivmoddi4+0x10c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <begin>:

	int 	GAIN;					// The user defined gain value.
	long 	OFFSET	= 0;	// The offset value used for tare weight.
	float SCALE 	= 1;	// The scale value in order to get more accurate value.

	void begin(uint8_t gain){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
		
		// The user is able to set gain.
		set_gain(gain);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 f817 	bl	8000dd4 <set_gain>

	
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <is_ready>:

	bool is_ready(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
		
		// When the data line goes low, the sensor is ready for retrieval.
		return HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13)==0;
 8000db4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <is_ready+0x20>)
 8000dba:	f001 fbfb 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf0c      	ite	eq
 8000dc4:	2301      	moveq	r3, #1
 8000dc6:	2300      	movne	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
	
		
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <set_gain>:

	void set_gain(uint8_t gain){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]

		switch (gain) {
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b80      	cmp	r3, #128	; 0x80
 8000de2:	d006      	beq.n	8000df2 <set_gain+0x1e>
 8000de4:	2b80      	cmp	r3, #128	; 0x80
 8000de6:	dc10      	bgt.n	8000e0a <set_gain+0x36>
 8000de8:	2b20      	cmp	r3, #32
 8000dea:	d00a      	beq.n	8000e02 <set_gain+0x2e>
 8000dec:	2b40      	cmp	r3, #64	; 0x40
 8000dee:	d004      	beq.n	8000dfa <set_gain+0x26>
 8000df0:	e00b      	b.n	8000e0a <set_gain+0x36>
			case 128:		// channel A, gain factor 128
				GAIN = 1;
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <set_gain+0x50>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
				break;
 8000df8:	e007      	b.n	8000e0a <set_gain+0x36>
			case 64:		// channel A, gain factor 64
				GAIN = 3;
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <set_gain+0x50>)
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	601a      	str	r2, [r3, #0]
				break;
 8000e00:	e003      	b.n	8000e0a <set_gain+0x36>
			case 32:		// channel B, gain factor 32
				GAIN = 2;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <set_gain+0x50>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	601a      	str	r2, [r3, #0]
				break;
 8000e08:	bf00      	nop
	}
	
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <set_gain+0x54>)
 8000e12:	f001 fbe7 	bl	80025e4 <HAL_GPIO_WritePin>
		read();
 8000e16:	f000 f809 	bl	8000e2c <read>
	
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200047c4 	.word	0x200047c4
 8000e28:	40021000 	.word	0x40021000

08000e2c <read>:

	long read(){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0

		// It checks the start sequence condition.
		while(!is_ready());
 8000e32:	bf00      	nop
 8000e34:	f7ff ffbc 	bl	8000db0 <is_ready>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f083 0301 	eor.w	r3, r3, #1
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f7      	bne.n	8000e34 <read+0x8>
	
		unsigned long value = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
		// 3 array each of 8 bit contain 24 bit data.
		uint8_t data[3] = {0};
 8000e48:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <read+0x17c>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	80bb      	strh	r3, [r7, #4]
 8000e4e:	2300      	movs	r3, #0
 8000e50:	71bb      	strb	r3, [r7, #6]
		// The filler is used for preventing conflict if any in the case of negative number representation.
		uint8_t filler = 0x00;
 8000e52:	2300      	movs	r3, #0
 8000e54:	77fb      	strb	r3, [r7, #31]
	
		for(int i = 0; i<8 ; i++){
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	e021      	b.n	8000ea0 <read+0x74>
			
			// The clock line is set.
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e62:	4852      	ldr	r0, [pc, #328]	; (8000fac <read+0x180>)
 8000e64:	f001 fbbe 	bl	80025e4 <HAL_GPIO_WritePin>
			// The obtaining data is shifted(MSB first).
			data[2] |= HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13) << (7-i);
 8000e68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6c:	484f      	ldr	r0, [pc, #316]	; (8000fac <read+0x180>)
 8000e6e:	f001 fba1 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	f1c3 0307 	rsb	r3, r3, #7
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	79ba      	ldrb	r2, [r7, #6]
 8000e82:	b252      	sxtb	r2, r2
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	4313      	orrs	r3, r2
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	71bb      	strb	r3, [r7, #6]
			// The clock line is reset.
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e94:	4845      	ldr	r0, [pc, #276]	; (8000fac <read+0x180>)
 8000e96:	f001 fba5 	bl	80025e4 <HAL_GPIO_WritePin>
		for(int i = 0; i<8 ; i++){
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2b07      	cmp	r3, #7
 8000ea4:	ddda      	ble.n	8000e5c <read+0x30>
	
	}

		for(int i = 0; i<8 ; i++){
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	e021      	b.n	8000ef0 <read+0xc4>
			
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb2:	483e      	ldr	r0, [pc, #248]	; (8000fac <read+0x180>)
 8000eb4:	f001 fb96 	bl	80025e4 <HAL_GPIO_WritePin>
	

			data[1] |= HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13) << (7-i);
 8000eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebc:	483b      	ldr	r0, [pc, #236]	; (8000fac <read+0x180>)
 8000ebe:	f001 fb79 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f1c3 0307 	rsb	r3, r3, #7
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	797a      	ldrb	r2, [r7, #5]
 8000ed2:	b252      	sxtb	r2, r2
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	717b      	strb	r3, [r7, #5]
			
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee4:	4831      	ldr	r0, [pc, #196]	; (8000fac <read+0x180>)
 8000ee6:	f001 fb7d 	bl	80025e4 <HAL_GPIO_WritePin>
		for(int i = 0; i<8 ; i++){
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2b07      	cmp	r3, #7
 8000ef4:	ddda      	ble.n	8000eac <read+0x80>
	
		}

		for(int i = 0; i<8 ; i++){
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	e021      	b.n	8000f40 <read+0x114>

			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f02:	482a      	ldr	r0, [pc, #168]	; (8000fac <read+0x180>)
 8000f04:	f001 fb6e 	bl	80025e4 <HAL_GPIO_WritePin>
	

			data[0] |= HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_13) << (7-i);
 8000f08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0c:	4827      	ldr	r0, [pc, #156]	; (8000fac <read+0x180>)
 8000f0e:	f001 fb51 	bl	80025b4 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	f1c3 0307 	rsb	r3, r3, #7
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	793a      	ldrb	r2, [r7, #4]
 8000f22:	b252      	sxtb	r2, r2
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	713b      	strb	r3, [r7, #4]
		

			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f34:	481d      	ldr	r0, [pc, #116]	; (8000fac <read+0x180>)
 8000f36:	f001 fb55 	bl	80025e4 <HAL_GPIO_WritePin>
		for(int i = 0; i<8 ; i++){
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	2b07      	cmp	r3, #7
 8000f44:	ddda      	ble.n	8000efc <read+0xd0>
	
		}

		// Channel and the gain factor are set for the next reading.
		for(unsigned int i=0 ; i<GAIN; i++){
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e00e      	b.n	8000f6a <read+0x13e>

			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f52:	4816      	ldr	r0, [pc, #88]	; (8000fac <read+0x180>)
 8000f54:	f001 fb46 	bl	80025e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f5e:	4813      	ldr	r0, [pc, #76]	; (8000fac <read+0x180>)
 8000f60:	f001 fb40 	bl	80025e4 <HAL_GPIO_WritePin>
		for(unsigned int i=0 ; i<GAIN; i++){
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <read+0x184>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d3ea      	bcc.n	8000f4c <read+0x120>
		}
	
		// It replicates the most significant bit to pad out a 32-bit signed integer.
		if (data[2] & 0x80) {
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	da02      	bge.n	8000f84 <read+0x158>
			filler = 0xFF;
 8000f7e:	23ff      	movs	r3, #255	; 0xff
 8000f80:	77fb      	strb	r3, [r7, #31]
 8000f82:	e001      	b.n	8000f88 <read+0x15c>
		} else {
			filler = 0x00;
 8000f84:	2300      	movs	r3, #0
 8000f86:	77fb      	strb	r3, [r7, #31]
		}
		// It constructs a 32-bit signed integer.
		value = ( (unsigned long)(filler) << 24
 8000f88:	7ffb      	ldrb	r3, [r7, #31]
 8000f8a:	061a      	lsls	r2, r3, #24
				| (unsigned long)(data[2]) << 16
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	041b      	lsls	r3, r3, #16
 8000f90:	431a      	orrs	r2, r3
				| (unsigned long)(data[1]) << 8
 8000f92:	797b      	ldrb	r3, [r7, #5]
 8000f94:	021b      	lsls	r3, r3, #8
 8000f96:	4313      	orrs	r3, r2
				| (unsigned long)(data[0]) );
 8000f98:	793a      	ldrb	r2, [r7, #4]
		value = ( (unsigned long)(filler) << 24
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	60bb      	str	r3, [r7, #8]

		return (long)(value);
 8000f9e:	68bb      	ldr	r3, [r7, #8]
	
	}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	08006a60 	.word	0x08006a60
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	200047c4 	.word	0x200047c4

08000fb4 <read_average>:
	
	long read_average(uint8_t times){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]

		long sum = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
		for(int i =0; i<times ; i++){
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	e00b      	b.n	8000fe0 <read_average+0x2c>
			sum += read();
 8000fc8:	f7ff ff30 	bl	8000e2c <read>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
			//It does nothing but wait.
			HAL_Delay(10); 
 8000fd4:	200a      	movs	r0, #10
 8000fd6:	f001 f84b 	bl	8002070 <HAL_Delay>
		for(int i =0; i<times ; i++){
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	dbef      	blt.n	8000fc8 <read_average+0x14>
		}
		return sum / times;
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	fb92 f3f3 	sdiv	r3, r2, r3
	}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <get_value>:

	double get_value(uint8_t times){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
		
		// It provides optimization.
		return read_average(times) - OFFSET;
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ffd5 	bl	8000fb4 <read_average>
 800100a:	4602      	mov	r2, r0
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <get_value+0x38>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fa2e 	bl	8000474 <__aeabi_i2d>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	ec43 2b17 	vmov	d7, r2, r3
	
	}
 8001020:	eeb0 0a47 	vmov.f32	s0, s14
 8001024:	eef0 0a67 	vmov.f32	s1, s15
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000098 	.word	0x20000098

08001034 <get_units>:

	float get_units(uint8_t times){
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]

		
		return get_value(times) /( SCALE * 10);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffd9 	bl	8000ff8 <get_value>
 8001046:	ec55 4b10 	vmov	r4, r5, d0
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <get_units+0x54>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001058:	ee17 0a90 	vmov	r0, s15
 800105c:	f7ff fa1c 	bl	8000498 <__aeabi_f2d>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	f7ff fb98 	bl	800079c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fcc2 	bl	80009fc <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	ee07 3a90 	vmov	s15, r3
		
	
	}
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bdb0      	pop	{r4, r5, r7, pc}
 8001088:	20000000 	.word	0x20000000

0800108c <tare>:

	void tare(uint8_t times){
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]

		double sum = read_average(times);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff8b 	bl	8000fb4 <read_average>
 800109e:	4603      	mov	r3, r0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f9e7 	bl	8000474 <__aeabi_i2d>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
		// The average value is assigned as offset.
		set_offset(sum);
 80010ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010b2:	f7ff fc5b 	bl	800096c <__aeabi_d2iz>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f815 	bl	80010e8 <set_offset>
	}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <set_scale>:

	void set_scale(float scale){
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	ed87 0a01 	vstr	s0, [r7, #4]

		SCALE = scale;
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <set_scale+0x1c>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6013      	str	r3, [r2, #0]
	
	}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	20000000 	.word	0x20000000

080010e8 <set_offset>:
	float get_scale(){
	
		return SCALE;
	}

	void set_offset(long offset){
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

		OFFSET = offset;
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <set_offset+0x1c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
	
	}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000098 	.word	0x20000098

08001108 <power_down>:
		
		return OFFSET;
	
	}

	void power_down(){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <power_down+0x20>)
 8001114:	f001 fa66 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111e:	4802      	ldr	r0, [pc, #8]	; (8001128 <power_down+0x20>)
 8001120:	f001 fa60 	bl	80025e4 <HAL_GPIO_WritePin>
	}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40021000 	.word	0x40021000

0800112c <power_up>:

	void power_up(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001136:	4802      	ldr	r0, [pc, #8]	; (8001140 <power_up+0x14>)
 8001138:	f001 fa54 	bl	80025e4 <HAL_GPIO_WritePin>
	}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021000 	.word	0x40021000

08001144 <Keypad4x4_Init>:
};

//***** Functions definition *****//
//Function(1): Set Keypad pins and ports
void Keypad4x4_Init(Keypad_WiresTypeDef  *KeypadWiringStruct)
{
 8001144:	b5b0      	push	{r4, r5, r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	//Step(1): Copy the Keypad wirings to the library
	KeypadStruct = *KeypadWiringStruct;
 800114c:	4a32      	ldr	r2, [pc, #200]	; (8001218 <Keypad4x4_Init+0xd4>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4614      	mov	r4, r2
 8001152:	461d      	mov	r5, r3
 8001154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//Step(2): Find the positions of the 4 OUT pins
	Keypad4x4_FindPins_positions();
 8001164:	f000 f85c 	bl	8001220 <Keypad4x4_FindPins_positions>
	//Step(3): Initialise all pins to set all OUT pins to RESET
	KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8001168:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <Keypad4x4_Init+0xd4>)
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	6859      	ldr	r1, [r3, #4]
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <Keypad4x4_Init+0xd8>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	2301      	movs	r3, #1
 8001176:	fa03 f202 	lsl.w	r2, r3, r2
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <Keypad4x4_Init+0xd4>)
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	430a      	orrs	r2, r1
 8001180:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <Keypad4x4_Init+0xd4>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	6859      	ldr	r1, [r3, #4]
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <Keypad4x4_Init+0xd8>)
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	461a      	mov	r2, r3
 800118e:	2301      	movs	r3, #1
 8001190:	fa03 f202 	lsl.w	r2, r3, r2
 8001194:	4b20      	ldr	r3, [pc, #128]	; (8001218 <Keypad4x4_Init+0xd4>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	430a      	orrs	r2, r1
 800119a:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <Keypad4x4_Init+0xd4>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	6859      	ldr	r1, [r3, #4]
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <Keypad4x4_Init+0xd8>)
 80011a4:	789b      	ldrb	r3, [r3, #2]
 80011a6:	461a      	mov	r2, r3
 80011a8:	2301      	movs	r3, #1
 80011aa:	fa03 f202 	lsl.w	r2, r3, r2
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <Keypad4x4_Init+0xd4>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <Keypad4x4_Init+0xd4>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	6859      	ldr	r1, [r3, #4]
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <Keypad4x4_Init+0xd8>)
 80011be:	78db      	ldrb	r3, [r3, #3]
 80011c0:	461a      	mov	r2, r3
 80011c2:	2301      	movs	r3, #1
 80011c4:	fa03 f202 	lsl.w	r2, r3, r2
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <Keypad4x4_Init+0xd4>)
 80011ca:	69db      	ldr	r3, [r3, #28]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	605a      	str	r2, [r3, #4]

	HAL_GPIO_WritePin(KeypadStruct.OUT0_Port, KeypadStruct.OUT0pin, GPIO_PIN_SET);
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <Keypad4x4_Init+0xd4>)
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	4a10      	ldr	r2, [pc, #64]	; (8001218 <Keypad4x4_Init+0xd4>)
 80011d6:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 80011d8:	2201      	movs	r2, #1
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 fa02 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT1_Port, KeypadStruct.OUT1pin, GPIO_PIN_SET);
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <Keypad4x4_Init+0xd4>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <Keypad4x4_Init+0xd4>)
 80011e6:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 80011e8:	2201      	movs	r2, #1
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 f9fa 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT2_Port, KeypadStruct.OUT2pin, GPIO_PIN_SET);
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <Keypad4x4_Init+0xd4>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a08      	ldr	r2, [pc, #32]	; (8001218 <Keypad4x4_Init+0xd4>)
 80011f6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80011f8:	2201      	movs	r2, #1
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 f9f2 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT3_Port, KeypadStruct.OUT3pin, GPIO_PIN_SET);
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <Keypad4x4_Init+0xd4>)
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <Keypad4x4_Init+0xd4>)
 8001206:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8001208:	2201      	movs	r2, #1
 800120a:	4618      	mov	r0, r3
 800120c:	f001 f9ea 	bl	80025e4 <HAL_GPIO_WritePin>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bdb0      	pop	{r4, r5, r7, pc}
 8001218:	2000009c 	.word	0x2000009c
 800121c:	200000cc 	.word	0x200000cc

08001220 <Keypad4x4_FindPins_positions>:
//Function(2): Get pin positions for colomn change use, only for out pins
static void Keypad4x4_FindPins_positions(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
	uint8_t idx=0;
 8001226:	2300      	movs	r3, #0
 8001228:	71fb      	strb	r3, [r7, #7]
	for(idx=0; idx<16; idx++)
 800122a:	2300      	movs	r3, #0
 800122c:	71fb      	strb	r3, [r7, #7]
 800122e:	e036      	b.n	800129e <Keypad4x4_FindPins_positions+0x7e>
	{
		if(((KeypadStruct.OUT0pin>>idx)&0x0001) == 0x0001)
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <Keypad4x4_FindPins_positions+0x94>)
 8001232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001234:	461a      	mov	r2, r3
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	fa42 f303 	asr.w	r3, r2, r3
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <Keypad4x4_FindPins_positions+0x2a>
		{
			OutPositions[0] = idx;
 8001244:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <Keypad4x4_FindPins_positions+0x98>)
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	7013      	strb	r3, [r2, #0]
		}
		if(((KeypadStruct.OUT1pin>>idx)&0x0001) == 0x0001)
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <Keypad4x4_FindPins_positions+0x94>)
 800124c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800124e:	461a      	mov	r2, r3
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	fa42 f303 	asr.w	r3, r2, r3
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d002      	beq.n	8001264 <Keypad4x4_FindPins_positions+0x44>
		{
			OutPositions[1] = idx;
 800125e:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <Keypad4x4_FindPins_positions+0x98>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	7053      	strb	r3, [r2, #1]
		}
		if(((KeypadStruct.OUT2pin>>idx)&0x0001) == 0x0001)
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <Keypad4x4_FindPins_positions+0x94>)
 8001266:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001268:	461a      	mov	r2, r3
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	fa42 f303 	asr.w	r3, r2, r3
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <Keypad4x4_FindPins_positions+0x5e>
		{
			OutPositions[2] = idx;
 8001278:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <Keypad4x4_FindPins_positions+0x98>)
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	7093      	strb	r3, [r2, #2]
		}
		if(((KeypadStruct.OUT3pin>>idx)&0x0001) == 0x0001)
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <Keypad4x4_FindPins_positions+0x94>)
 8001280:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001282:	461a      	mov	r2, r3
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	fa42 f303 	asr.w	r3, r2, r3
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d002      	beq.n	8001298 <Keypad4x4_FindPins_positions+0x78>
		{
			OutPositions[3] = idx;
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <Keypad4x4_FindPins_positions+0x98>)
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	70d3      	strb	r3, [r2, #3]
	for(idx=0; idx<16; idx++)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	3301      	adds	r3, #1
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d9c5      	bls.n	8001230 <Keypad4x4_FindPins_positions+0x10>
		}
	}
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000009c 	.word	0x2000009c
 80012b8:	200000cc 	.word	0x200000cc

080012bc <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
static void LCD1602_EnablePulse(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <LCD1602_EnablePulse+0x38>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <LCD1602_EnablePulse+0x3c>)
 80012c6:	8811      	ldrh	r1, [r2, #0]
 80012c8:	2201      	movs	r2, #1
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 f98a 	bl	80025e4 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 80012d0:	230a      	movs	r3, #10
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f97c 	bl	80015d0 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <LCD1602_EnablePulse+0x38>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <LCD1602_EnablePulse+0x3c>)
 80012de:	8811      	ldrh	r1, [r2, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 f97e 	bl	80025e4 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 80012e8:	203c      	movs	r0, #60	; 0x3c
 80012ea:	f000 f971 	bl	80015d0 <LCD1602_TIM_MicorSecDelay>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200000d0 	.word	0x200000d0
 80012f8:	200000d6 	.word	0x200000d6

080012fc <LCD1602_RS>:
//2) RS control
static void LCD1602_RS(bool state)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <LCD1602_RS+0x22>
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <LCD1602_RS+0x3c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <LCD1602_RS+0x40>)
 8001312:	8811      	ldrh	r1, [r2, #0]
 8001314:	2201      	movs	r2, #1
 8001316:	4618      	mov	r0, r3
 8001318:	f001 f964 	bl	80025e4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 800131c:	e007      	b.n	800132e <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <LCD1602_RS+0x3c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a06      	ldr	r2, [pc, #24]	; (800133c <LCD1602_RS+0x40>)
 8001324:	8811      	ldrh	r1, [r2, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f001 f95b 	bl	80025e4 <HAL_GPIO_WritePin>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200000d0 	.word	0x200000d0
 800133c:	200000d4 	.word	0x200000d4

08001340 <LCD1602_write>:

//3) Write Parallel interface
static void LCD1602_write(uint8_t byte)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 030f 	and.w	r3, r3, #15
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8001358:	4b61      	ldr	r3, [pc, #388]	; (80014e0 <LCD1602_write+0x1a0>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d15a      	bne.n	8001416 <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001360:	4b60      	ldr	r3, [pc, #384]	; (80014e4 <LCD1602_write+0x1a4>)
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	4b60      	ldr	r3, [pc, #384]	; (80014e8 <LCD1602_write+0x1a8>)
 8001366:	8819      	ldrh	r1, [r3, #0]
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	b2db      	uxtb	r3, r3
 8001370:	461a      	mov	r2, r3
 8001372:	f001 f937 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001376:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <LCD1602_write+0x1a4>)
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	4b5c      	ldr	r3, [pc, #368]	; (80014ec <LCD1602_write+0x1ac>)
 800137c:	8819      	ldrh	r1, [r3, #0]
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	b2db      	uxtb	r3, r3
 8001386:	461a      	mov	r2, r3
 8001388:	f001 f92c 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800138c:	4b55      	ldr	r3, [pc, #340]	; (80014e4 <LCD1602_write+0x1a4>)
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	4b57      	ldr	r3, [pc, #348]	; (80014f0 <LCD1602_write+0x1b0>)
 8001392:	8819      	ldrh	r1, [r3, #0]
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	b2db      	uxtb	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	f001 f921 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80013a2:	4b50      	ldr	r3, [pc, #320]	; (80014e4 <LCD1602_write+0x1a4>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <LCD1602_write+0x1b4>)
 80013a8:	8819      	ldrh	r1, [r3, #0]
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	f001 f916 	bl	80025e4 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80013b8:	4b4f      	ldr	r3, [pc, #316]	; (80014f8 <LCD1602_write+0x1b8>)
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	4b4f      	ldr	r3, [pc, #316]	; (80014fc <LCD1602_write+0x1bc>)
 80013be:	8819      	ldrh	r1, [r3, #0]
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	f001 f90b 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80013ce:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <LCD1602_write+0x1b8>)
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	4b4b      	ldr	r3, [pc, #300]	; (8001500 <LCD1602_write+0x1c0>)
 80013d4:	8819      	ldrh	r1, [r3, #0]
 80013d6:	7bbb      	ldrb	r3, [r7, #14]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	461a      	mov	r2, r3
 80013e0:	f001 f900 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80013e4:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <LCD1602_write+0x1b8>)
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	4b46      	ldr	r3, [pc, #280]	; (8001504 <LCD1602_write+0x1c4>)
 80013ea:	8819      	ldrh	r1, [r3, #0]
 80013ec:	7bbb      	ldrb	r3, [r7, #14]
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	f001 f8f5 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80013fa:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <LCD1602_write+0x1b8>)
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	4b42      	ldr	r3, [pc, #264]	; (8001508 <LCD1602_write+0x1c8>)
 8001400:	8819      	ldrh	r1, [r3, #0]
 8001402:	7bbb      	ldrb	r3, [r7, #14]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	b2db      	uxtb	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	f001 f8ea 	bl	80025e4 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 8001410:	f7ff ff54 	bl	80012bc <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8001414:	e05f      	b.n	80014d6 <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8001416:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <LCD1602_write+0x1a0>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d15b      	bne.n	80014d6 <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800141e:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <LCD1602_write+0x1b8>)
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	4b36      	ldr	r3, [pc, #216]	; (80014fc <LCD1602_write+0x1bc>)
 8001424:	8819      	ldrh	r1, [r3, #0]
 8001426:	7bbb      	ldrb	r3, [r7, #14]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	f001 f8d8 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001434:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <LCD1602_write+0x1b8>)
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	4b31      	ldr	r3, [pc, #196]	; (8001500 <LCD1602_write+0x1c0>)
 800143a:	8819      	ldrh	r1, [r3, #0]
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	f001 f8cd 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <LCD1602_write+0x1b8>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <LCD1602_write+0x1c4>)
 8001450:	8819      	ldrh	r1, [r3, #0]
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	b2db      	uxtb	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	f001 f8c2 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <LCD1602_write+0x1b8>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <LCD1602_write+0x1c8>)
 8001466:	8819      	ldrh	r1, [r3, #0]
 8001468:	7bbb      	ldrb	r3, [r7, #14]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	b2db      	uxtb	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	f001 f8b7 	bl	80025e4 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8001476:	f7ff ff21 	bl	80012bc <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <LCD1602_write+0x1b8>)
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <LCD1602_write+0x1bc>)
 8001480:	8819      	ldrh	r1, [r3, #0]
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	f001 f8aa 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <LCD1602_write+0x1b8>)
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <LCD1602_write+0x1c0>)
 8001496:	8819      	ldrh	r1, [r3, #0]
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	f001 f89f 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <LCD1602_write+0x1b8>)
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <LCD1602_write+0x1c4>)
 80014ac:	8819      	ldrh	r1, [r3, #0]
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	f001 f894 	bl	80025e4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <LCD1602_write+0x1b8>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <LCD1602_write+0x1c8>)
 80014c2:	8819      	ldrh	r1, [r3, #0]
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	f001 f889 	bl	80025e4 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 80014d2:	f7ff fef3 	bl	80012bc <LCD1602_EnablePulse>
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000004 	.word	0x20000004
 80014e4:	200000d8 	.word	0x200000d8
 80014e8:	200000dc 	.word	0x200000dc
 80014ec:	200000de 	.word	0x200000de
 80014f0:	200000e0 	.word	0x200000e0
 80014f4:	200000e2 	.word	0x200000e2
 80014f8:	200000e4 	.word	0x200000e4
 80014fc:	200000e8 	.word	0x200000e8
 8001500:	200000ea 	.word	0x200000ea
 8001504:	200000ec 	.word	0x200000ec
 8001508:	200000ee 	.word	0x200000ee
 800150c:	00000000 	.word	0x00000000

08001510 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
static void LCD1602_TIM_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 8001516:	1d3a      	adds	r2, r7, #4
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f001 fcdc 	bl	8002edc <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <LCD1602_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 800152a:	f001 fcaf 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 800152e:	61f8      	str	r0, [r7, #28]
 8001530:	e004      	b.n	800153c <LCD1602_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 8001532:	f001 fcab 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 8001536:	4603      	mov	r3, r0
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 800153c:	69f8      	ldr	r0, [r7, #28]
 800153e:	f7fe ff89 	bl	8000454 <__aeabi_ui2d>
 8001542:	a321      	add	r3, pc, #132	; (adr r3, 80015c8 <LCD1602_TIM_Config+0xb8>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe fffe 	bl	8000548 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff fa32 	bl	80009bc <__aeabi_d2uiz>
 8001558:	4603      	mov	r3, r0
 800155a:	61fb      	str	r3, [r7, #28]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 800155c:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <LCD1602_TIM_Config+0xb0>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <LCD1602_TIM_Config+0xb0>)
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <LCD1602_TIM_Config+0xb4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <LCD1602_TIM_Config+0xb4>)
 800156e:	f023 0310 	bic.w	r3, r3, #16
 8001572:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <LCD1602_TIM_Config+0xb4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <LCD1602_TIM_Config+0xb4>)
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	6013      	str	r3, [r2, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 8001580:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <LCD1602_TIM_Config+0xb4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <LCD1602_TIM_Config+0xb4>)
 8001586:	f023 0304 	bic.w	r3, r3, #4
 800158a:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <LCD1602_TIM_Config+0xb4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <LCD1602_TIM_Config+0xb4>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <LCD1602_TIM_Config+0xb4>)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3b01      	subs	r3, #1
 800159e:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <LCD1602_TIM_Config+0xb4>)
 80015a2:	2209      	movs	r2, #9
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <LCD1602_TIM_Config+0xb4>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <LCD1602_TIM_Config+0xb4>)
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <LCD1602_TIM_Config+0xb4>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	6113      	str	r3, [r2, #16]
}
 80015b8:	bf00      	nop
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40000400 	.word	0x40000400
 80015c8:	a0b5ed8d 	.word	0xa0b5ed8d
 80015cc:	3eb0c6f7 	.word	0x3eb0c6f7

080015d0 <LCD1602_TIM_MicorSecDelay>:
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 80015d8:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <LCD1602_TIM_MicorSecDelay+0x44>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3b01      	subs	r3, #1
 80015de:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <LCD1602_TIM_MicorSecDelay+0x44>)
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <LCD1602_TIM_MicorSecDelay+0x44>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <LCD1602_TIM_MicorSecDelay+0x44>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a08      	ldr	r2, [pc, #32]	; (8001614 <LCD1602_TIM_MicorSecDelay+0x44>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 80015f8:	bf00      	nop
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <LCD1602_TIM_MicorSecDelay+0x44>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b01      	cmp	r3, #1
 8001604:	d1f9      	bne.n	80015fa <LCD1602_TIM_MicorSecDelay+0x2a>
}
 8001606:	bf00      	nop
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	40000400 	.word	0x40000400

08001618 <LCD1602_writeCommand>:
//5) Write command
static void LCD1602_writeCommand(uint8_t command)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff fe6a 	bl	80012fc <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fe88 	bl	8001340 <LCD1602_write>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <LCD1602_write4bitCommand>:
	//Call low level write parallel function
	LCD1602_write(data);
}
//7) Write 4 bits command, *FOR 4 BITS MODE ONLY*
static void LCD1602_write4bitCommand(uint8_t nibble)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = nibble&0xF;
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 030f 	and.w	r3, r3, #15
 8001648:	73fb      	strb	r3, [r7, #15]
	//Set RS to 0
	LCD1602_RS(false);
 800164a:	2000      	movs	r0, #0
 800164c:	f7ff fe56 	bl	80012fc <LCD1602_RS>
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <LCD1602_write4bitCommand+0x7c>)
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <LCD1602_write4bitCommand+0x80>)
 8001656:	8819      	ldrh	r1, [r3, #0]
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	f000 ffbf 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <LCD1602_write4bitCommand+0x7c>)
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <LCD1602_write4bitCommand+0x84>)
 800166c:	8819      	ldrh	r1, [r3, #0]
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	b2db      	uxtb	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	f000 ffb4 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <LCD1602_write4bitCommand+0x7c>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <LCD1602_write4bitCommand+0x88>)
 8001682:	8819      	ldrh	r1, [r3, #0]
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	b2db      	uxtb	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	f000 ffa9 	bl	80025e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <LCD1602_write4bitCommand+0x7c>)
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <LCD1602_write4bitCommand+0x8c>)
 8001698:	8819      	ldrh	r1, [r3, #0]
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	f000 ff9e 	bl	80025e4 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
 80016a8:	f7ff fe08 	bl	80012bc <LCD1602_EnablePulse>
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200000e4 	.word	0x200000e4
 80016b8:	200000e8 	.word	0x200000e8
 80016bc:	200000ea 	.word	0x200000ea
 80016c0:	200000ec 	.word	0x200000ec
 80016c4:	200000ee 	.word	0x200000ee

080016c8 <LCD1602_Begin4BIT>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}
//2) LCD begin 4 bits function
void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	460b      	mov	r3, r1
 80016d4:	817b      	strh	r3, [r7, #10]
 80016d6:	4613      	mov	r3, r2
 80016d8:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 80016da:	4a27      	ldr	r2, [pc, #156]	; (8001778 <LCD1602_Begin4BIT+0xb0>)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 80016e0:	4a26      	ldr	r2, [pc, #152]	; (800177c <LCD1602_Begin4BIT+0xb4>)
 80016e2:	897b      	ldrh	r3, [r7, #10]
 80016e4:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 80016e6:	4a26      	ldr	r2, [pc, #152]	; (8001780 <LCD1602_Begin4BIT+0xb8>)
 80016e8:	893b      	ldrh	r3, [r7, #8]
 80016ea:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 80016ec:	4a25      	ldr	r2, [pc, #148]	; (8001784 <LCD1602_Begin4BIT+0xbc>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 80016f2:	4a25      	ldr	r2, [pc, #148]	; (8001788 <LCD1602_Begin4BIT+0xc0>)
 80016f4:	8b3b      	ldrh	r3, [r7, #24]
 80016f6:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 80016f8:	4a24      	ldr	r2, [pc, #144]	; (800178c <LCD1602_Begin4BIT+0xc4>)
 80016fa:	8bbb      	ldrh	r3, [r7, #28]
 80016fc:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 80016fe:	4a24      	ldr	r2, [pc, #144]	; (8001790 <LCD1602_Begin4BIT+0xc8>)
 8001700:	8c3b      	ldrh	r3, [r7, #32]
 8001702:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 8001704:	4a23      	ldr	r2, [pc, #140]	; (8001794 <LCD1602_Begin4BIT+0xcc>)
 8001706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001708:	8013      	strh	r3, [r2, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 800170a:	f7ff ff01 	bl	8001510 <LCD1602_TIM_Config>
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <LCD1602_Begin4BIT+0xd0>)
 8001710:	2202      	movs	r2, #2
 8001712:	701a      	strb	r2, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <LCD1602_Begin4BIT+0xd4>)
 8001716:	2228      	movs	r2, #40	; 0x28
 8001718:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 800171a:	2014      	movs	r0, #20
 800171c:	f000 fca8 	bl	8002070 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 8001720:	2003      	movs	r0, #3
 8001722:	f7ff ff89 	bl	8001638 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 8001726:	2005      	movs	r0, #5
 8001728:	f000 fca2 	bl	8002070 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 800172c:	2003      	movs	r0, #3
 800172e:	f7ff ff83 	bl	8001638 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8001732:	2001      	movs	r0, #1
 8001734:	f000 fc9c 	bl	8002070 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8001738:	2003      	movs	r0, #3
 800173a:	f7ff ff7d 	bl	8001638 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 800173e:	2001      	movs	r0, #1
 8001740:	f000 fc96 	bl	8002070 <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 8001744:	2002      	movs	r0, #2
 8001746:	f7ff ff77 	bl	8001638 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 800174a:	2001      	movs	r0, #1
 800174c:	f000 fc90 	bl	8002070 <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8001750:	200f      	movs	r0, #15
 8001752:	f7ff ff61 	bl	8001618 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff ff5e 	bl	8001618 <LCD1602_writeCommand>
	HAL_Delay(3);
 800175c:	2003      	movs	r0, #3
 800175e:	f000 fc87 	bl	8002070 <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001762:	2028      	movs	r0, #40	; 0x28
 8001764:	f7ff ff58 	bl	8001618 <LCD1602_writeCommand>
	HAL_Delay(3);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 fc81 	bl	8002070 <HAL_Delay>
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200000d0 	.word	0x200000d0
 800177c:	200000d4 	.word	0x200000d4
 8001780:	200000d6 	.word	0x200000d6
 8001784:	200000e4 	.word	0x200000e4
 8001788:	200000e8 	.word	0x200000e8
 800178c:	200000ea 	.word	0x200000ea
 8001790:	200000ec 	.word	0x200000ec
 8001794:	200000ee 	.word	0x200000ee
 8001798:	20000004 	.word	0x20000004
 800179c:	20000005 	.word	0x20000005

080017a0 <Tsk_Envio>:
#include<stdio.h>
#include <stdlib.h>
#include <string.h>

void Tsk_Envio(void *argument)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	; 0x30
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tsk_Envio */
	    unsigned char str[2] = {};
 80017a8:	2300      	movs	r3, #0
 80017aa:	853b      	strh	r3, [r7, #40]	; 0x28
		char message[10] = {};
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	f107 0320 	add.w	r3, r7, #32
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	809a      	strh	r2, [r3, #4]
		int cont_uart = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		char command ;
		unsigned char overflow[8] = {"Overflow"};
 80017be:	4a30      	ldr	r2, [pc, #192]	; (8001880 <Tsk_Envio+0xe0>)
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017c8:	e883 0003 	stmia.w	r3, {r0, r1}
		//unsigned char cmd_ok[6] = {"Cmd OK"};
		//unsigned char cmd_nok[9] = {"Cmd NO OK"};

		char response[10] = {};
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	809a      	strh	r2, [r3, #4]
  /* Infinite loop */
  for(;;)
  {
//	  HAL_UART_Transmit(&huart4, overflow, 8, HAL_MAX_DELAY);

	      HAL_UART_Receive(&huart4, str, 1, HAL_MAX_DELAY);
 80017da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	2201      	movs	r2, #1
 80017e4:	4827      	ldr	r0, [pc, #156]	; (8001884 <Tsk_Envio+0xe4>)
 80017e6:	f001 ff38 	bl	800365a <HAL_UART_Receive>
	 	  message[cont_uart] = str[0];
 80017ea:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80017ee:	f107 021c 	add.w	r2, r7, #28
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	4413      	add	r3, r2
 80017f6:	460a      	mov	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
	 	  cont_uart++;
 80017fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fc:	3301      	adds	r3, #1
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c

	 	  if (cont_uart > 3)
 8001800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001802:	2b03      	cmp	r3, #3
 8001804:	dd0f      	ble.n	8001826 <Tsk_Envio+0x86>
	 	  {
	 		  cont_uart = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
	 		  strcpy(message, "         ");
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <Tsk_Envio+0xe8>)
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	ca07      	ldmia	r2, {r0, r1, r2}
 8001812:	c303      	stmia	r3!, {r0, r1}
 8001814:	801a      	strh	r2, [r3, #0]
	 		  HAL_UART_Transmit(&huart4, overflow, 8, HAL_MAX_DELAY);
 8001816:	f107 0114 	add.w	r1, r7, #20
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
 800181e:	2208      	movs	r2, #8
 8001820:	4818      	ldr	r0, [pc, #96]	; (8001884 <Tsk_Envio+0xe4>)
 8001822:	f001 fe88 	bl	8003536 <HAL_UART_Transmit>
	 	  }
	 	  switch (command)
 8001826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800182a:	2b6b      	cmp	r3, #107	; 0x6b
 800182c:	d002      	beq.n	8001834 <Tsk_Envio+0x94>
 800182e:	2b6c      	cmp	r3, #108	; 0x6c
 8001830:	d012      	beq.n	8001858 <Tsk_Envio+0xb8>
 8001832:	e023      	b.n	800187c <Tsk_Envio+0xdc>
	 	  {
	 	  	  case 'k':
	 	  		  // a is used to read back the number previously sent
	 	  		  itoa(current_weight, response, 10);
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <Tsk_Envio+0xec>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f107 0308 	add.w	r3, r7, #8
 800183e:	220a      	movs	r2, #10
 8001840:	4619      	mov	r1, r3
 8001842:	f004 ffdf 	bl	8006804 <itoa>
	 	  		  HAL_UART_Transmit(&huart4, response, 6, HAL_MAX_DELAY);
 8001846:	f107 0108 	add.w	r1, r7, #8
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	2206      	movs	r2, #6
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <Tsk_Envio+0xe4>)
 8001852:	f001 fe70 	bl	8003536 <HAL_UART_Transmit>
	 	  		  break;
 8001856:	e011      	b.n	800187c <Tsk_Envio+0xdc>

	 	  	  case 'l':
	 	  		  // b commands is used to control the blue led
	 	  		itoa(current_weight_lb, response, 10);
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <Tsk_Envio+0xf0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f107 0308 	add.w	r3, r7, #8
 8001862:	220a      	movs	r2, #10
 8001864:	4619      	mov	r1, r3
 8001866:	f004 ffcd 	bl	8006804 <itoa>
	 	  		HAL_UART_Transmit(&huart4, response, 6, HAL_MAX_DELAY);
 800186a:	f107 0108 	add.w	r1, r7, #8
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	2206      	movs	r2, #6
 8001874:	4803      	ldr	r0, [pc, #12]	; (8001884 <Tsk_Envio+0xe4>)
 8001876:	f001 fe5e 	bl	8003536 <HAL_UART_Transmit>
	 	  		  break;
 800187a:	bf00      	nop
	      HAL_UART_Receive(&huart4, str, 1, HAL_MAX_DELAY);
 800187c:	e7ad      	b.n	80017da <Tsk_Envio+0x3a>
 800187e:	bf00      	nop
 8001880:	08006a70 	.word	0x08006a70
 8001884:	20004844 	.word	0x20004844
 8001888:	08006a64 	.word	0x08006a64
 800188c:	200047f8 	.word	0x200047f8
 8001890:	200047f0 	.word	0x200047f0
 8001894:	00000000 	.word	0x00000000

08001898 <Tsk_Measurements>:
#include "HX711.h"
#include "globalVar.h"


void Tsk_Measurements(void *argument)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tsk_Measurements */

	power_down();
 80018a0:	f7ff fc32 	bl	8001108 <power_down>
	HAL_Delay(10);
 80018a4:	200a      	movs	r0, #10
 80018a6:	f000 fbe3 	bl	8002070 <HAL_Delay>
	power_up();
 80018aa:	f7ff fc3f 	bl	800112c <power_up>
	begin(gain);
 80018ae:	4b48      	ldr	r3, [pc, #288]	; (80019d0 <Tsk_Measurements+0x138>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fa6e 	bl	8000d94 <begin>
	set_scale(escala);// SETEA LA GANANCIA DEL SISTEMA
 80018b8:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <Tsk_Measurements+0x13c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c4:	eeb0 0a67 	vmov.f32	s0, s15
 80018c8:	f7ff fbfe 	bl	80010c8 <set_scale>
	tare(veces);//OFFSET
 80018cc:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <Tsk_Measurements+0x140>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fbdb 	bl	800108c <tare>
	promedio = 10;
 80018d6:	4b41      	ldr	r3, [pc, #260]	; (80019dc <Tsk_Measurements+0x144>)
 80018d8:	220a      	movs	r2, #10
 80018da:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
  lectura= read();
 80018dc:	f7ff faa6 	bl	8000e2c <read>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4a3f      	ldr	r2, [pc, #252]	; (80019e0 <Tsk_Measurements+0x148>)
 80018e4:	6013      	str	r3, [r2, #0]
  cont++;
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <Tsk_Measurements+0x14c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4a3d      	ldr	r2, [pc, #244]	; (80019e4 <Tsk_Measurements+0x14c>)
 80018ee:	6013      	str	r3, [r2, #0]
  valor= get_units(promedio);			// obtencion del peso
 80018f0:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <Tsk_Measurements+0x144>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fb9d 	bl	8001034 <get_units>
 80018fa:	eef0 7a40 	vmov.f32	s15, s0
 80018fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001902:	ee17 2a90 	vmov	r2, s15
 8001906:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <Tsk_Measurements+0x150>)
 8001908:	601a      	str	r2, [r3, #0]

	 	     if(valor>(0-resolucion) && valor<(resolucion)){
 800190a:	4b38      	ldr	r3, [pc, #224]	; (80019ec <Tsk_Measurements+0x154>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	425a      	negs	r2, r3
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <Tsk_Measurements+0x150>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	da0e      	bge.n	8001936 <Tsk_Measurements+0x9e>
 8001918:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <Tsk_Measurements+0x150>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b33      	ldr	r3, [pc, #204]	; (80019ec <Tsk_Measurements+0x154>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	da08      	bge.n	8001936 <Tsk_Measurements+0x9e>
	 	  		  estadoB= 0; // la balanza esta vacia y actualizando el offset
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <Tsk_Measurements+0x158>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
	 	  		  true_offset = valor;
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <Tsk_Measurements+0x150>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <Tsk_Measurements+0x15c>)
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e043      	b.n	80019be <Tsk_Measurements+0x126>
	 	  	  }
	 	  	  else if( valor> (0-resolucion) && valor<(200000+resolucion)){
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <Tsk_Measurements+0x154>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	425a      	negs	r2, r3
 800193c:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <Tsk_Measurements+0x150>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	da28      	bge.n	8001996 <Tsk_Measurements+0xfe>
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <Tsk_Measurements+0x154>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 800194c:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8001950:	4a25      	ldr	r2, [pc, #148]	; (80019e8 <Tsk_Measurements+0x150>)
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	4293      	cmp	r3, r2
 8001956:	db1e      	blt.n	8001996 <Tsk_Measurements+0xfe>
	 	  		  estadoB = 1 ;// se conoce que esta pesando un objeto dentro de rango adecuado
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <Tsk_Measurements+0x158>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]
	 	  	  	  current_weight = valor - true_offset;
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <Tsk_Measurements+0x150>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <Tsk_Measurements+0x15c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <Tsk_Measurements+0x160>)
 800196c:	6013      	str	r3, [r2, #0]
	 	  	  	  current_weight_lb = (current_weight*2.2);
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <Tsk_Measurements+0x160>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fd6e 	bl	8000454 <__aeabi_ui2d>
 8001978:	a313      	add	r3, pc, #76	; (adr r3, 80019c8 <Tsk_Measurements+0x130>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fde3 	bl	8000548 <__aeabi_dmul>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f817 	bl	80009bc <__aeabi_d2uiz>
 800198e:	4603      	mov	r3, r0
 8001990:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <Tsk_Measurements+0x164>)
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e013      	b.n	80019be <Tsk_Measurements+0x126>
	 	  	  }
	 	  	  else if((valor>200000+resolucion)||(valor<0-resolucion)){
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <Tsk_Measurements+0x154>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 800199e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80019a2:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <Tsk_Measurements+0x150>)
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	4293      	cmp	r3, r2
 80019a8:	db06      	blt.n	80019b8 <Tsk_Measurements+0x120>
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <Tsk_Measurements+0x154>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	425a      	negs	r2, r3
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <Tsk_Measurements+0x150>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	dd02      	ble.n	80019be <Tsk_Measurements+0x126>
	 	  	  //else >300+resolucion <0-resolucion
	 	  	  //sobrepeo o esta desconectada o CC
	 	  	  estadoB = 2 ;
 80019b8:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <Tsk_Measurements+0x158>)
 80019ba:	2202      	movs	r2, #2
 80019bc:	601a      	str	r2, [r3, #0]

	 	  	  }


	  //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	 	  osDelay(500);
 80019be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019c2:	f002 fa43 	bl	8003e4c <osDelay>
  lectura= read();
 80019c6:	e789      	b.n	80018dc <Tsk_Measurements+0x44>
 80019c8:	9999999a 	.word	0x9999999a
 80019cc:	40019999 	.word	0x40019999
 80019d0:	20000007 	.word	0x20000007
 80019d4:	08006b28 	.word	0x08006b28
 80019d8:	20000006 	.word	0x20000006
 80019dc:	200047d8 	.word	0x200047d8
 80019e0:	200047ec 	.word	0x200047ec
 80019e4:	200047f4 	.word	0x200047f4
 80019e8:	200047e0 	.word	0x200047e0
 80019ec:	08006b2c 	.word	0x08006b2c
 80019f0:	200047e8 	.word	0x200047e8
 80019f4:	200047dc 	.word	0x200047dc
 80019f8:	200047f8 	.word	0x200047f8
 80019fc:	200047f0 	.word	0x200047f0

08001a00 <Tsk_Supervisor>:
#include "cmsis_os.h"

#include "HX711.h"
#include "globalVar.h"
void Tsk_Supervisor(void *argument)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	  		 osDelay(500);
	  	 case 2:
	  		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); // prueba con led de la stm(ROJO )
	  		 osDelay(500);
*/
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001a08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <Tsk_Supervisor+0x1c>)
 8001a0e:	f000 fe02 	bl	8002616 <HAL_GPIO_TogglePin>
	   osDelay(500);
 8001a12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a16:	f002 fa19 	bl	8003e4c <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001a1a:	e7f5      	b.n	8001a08 <Tsk_Supervisor+0x8>
 8001a1c:	40020c00 	.word	0x40020c00

08001a20 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TskMeasurements */
  TskMeasurementsHandle = osThreadNew(Tsk_Measurements, NULL, &TskMeasurements_attributes);
 8001a24:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <MX_FREERTOS_Init+0x38>)
 8001a26:	2100      	movs	r1, #0
 8001a28:	480c      	ldr	r0, [pc, #48]	; (8001a5c <MX_FREERTOS_Init+0x3c>)
 8001a2a:	f002 f97d 	bl	8003d28 <osThreadNew>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <MX_FREERTOS_Init+0x40>)
 8001a32:	6013      	str	r3, [r2, #0]

  /* creation of TskSupervisor */
  TskSupervisorHandle = osThreadNew(Tsk_Supervisor, NULL, &TskSupervisor_attributes);
 8001a34:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <MX_FREERTOS_Init+0x44>)
 8001a36:	2100      	movs	r1, #0
 8001a38:	480b      	ldr	r0, [pc, #44]	; (8001a68 <MX_FREERTOS_Init+0x48>)
 8001a3a:	f002 f975 	bl	8003d28 <osThreadNew>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <MX_FREERTOS_Init+0x4c>)
 8001a42:	6013      	str	r3, [r2, #0]

  /* creation of TskEnvio */
  TskEnvioHandle = osThreadNew(Tsk_Envio, NULL, &TskEnvio_attributes);
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <MX_FREERTOS_Init+0x50>)
 8001a46:	2100      	movs	r1, #0
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <MX_FREERTOS_Init+0x54>)
 8001a4a:	f002 f96d 	bl	8003d28 <osThreadNew>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <MX_FREERTOS_Init+0x58>)
 8001a52:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	08006abc 	.word	0x08006abc
 8001a5c:	08001899 	.word	0x08001899
 8001a60:	200047d0 	.word	0x200047d0
 8001a64:	08006ae0 	.word	0x08006ae0
 8001a68:	08001a01 	.word	0x08001a01
 8001a6c:	200047c8 	.word	0x200047c8
 8001a70:	08006b04 	.word	0x08006b04
 8001a74:	080017a1 	.word	0x080017a1
 8001a78:	200047cc 	.word	0x200047cc

08001a7c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a47      	ldr	r2, [pc, #284]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b45      	ldr	r3, [pc, #276]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a40      	ldr	r2, [pc, #256]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001ab8:	f043 0310 	orr.w	r3, r3, #16
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a39      	ldr	r2, [pc, #228]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a32      	ldr	r2, [pc, #200]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <MX_GPIO_Init+0x13c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f640 0103 	movw	r1, #2051	; 0x803
 8001b08:	482c      	ldr	r0, [pc, #176]	; (8001bbc <MX_GPIO_Init+0x140>)
 8001b0a:	f000 fd6b 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f247 01f0 	movw	r1, #28912	; 0x70f0
 8001b14:	482a      	ldr	r0, [pc, #168]	; (8001bc0 <MX_GPIO_Init+0x144>)
 8001b16:	f000 fd65 	bl	80025e4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	21f0      	movs	r1, #240	; 0xf0
 8001b1e:	4829      	ldr	r0, [pc, #164]	; (8001bc4 <MX_GPIO_Init+0x148>)
 8001b20:	f000 fd60 	bl	80025e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE11 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1;
 8001b24:	f640 0303 	movw	r3, #2051	; 0x803
 8001b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	481f      	ldr	r0, [pc, #124]	; (8001bbc <MX_GPIO_Init+0x140>)
 8001b3e:	f000 fb9d 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4819      	ldr	r0, [pc, #100]	; (8001bbc <MX_GPIO_Init+0x140>)
 8001b58:	f000 fb90 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8001b5c:	f247 03f0 	movw	r3, #28912	; 0x70f0
 8001b60:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	4812      	ldr	r0, [pc, #72]	; (8001bc0 <MX_GPIO_Init+0x144>)
 8001b76:	f000 fb81 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b7a:	230f      	movs	r3, #15
 8001b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <MX_GPIO_Init+0x144>)
 8001b8e:	f000 fb75 	bl	800227c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b92:	23f0      	movs	r3, #240	; 0xf0
 8001b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <MX_GPIO_Init+0x148>)
 8001baa:	f000 fb67 	bl	800227c <HAL_GPIO_Init>

}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	; 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40020c00 	.word	0x40020c00
 8001bc4:	40020400 	.word	0x40020400

08001bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b090      	sub	sp, #64	; 0x40
 8001bcc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bce:	f000 fa0d 	bl	8001fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd2:	f000 f843 	bl	8001c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bd6:	f7ff ff51 	bl	8001a7c <MX_GPIO_Init>
  MX_UART4_Init();
 8001bda:	f000 f96b 	bl	8001eb4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

//  keypad_init();

  myKeypadStruct.IN0_Port = GPIOD;
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <main+0x88>)
 8001be0:	603b      	str	r3, [r7, #0]
  myKeypadStruct.IN1_Port = GPIOD;
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <main+0x88>)
 8001be4:	607b      	str	r3, [r7, #4]
  myKeypadStruct.IN2_Port = GPIOD;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <main+0x88>)
 8001be8:	60bb      	str	r3, [r7, #8]
  myKeypadStruct.IN3_Port = GPIOD;
 8001bea:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <main+0x88>)
 8001bec:	60fb      	str	r3, [r7, #12]

  myKeypadStruct.OUT0_Port = GPIOD;
 8001bee:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <main+0x88>)
 8001bf0:	613b      	str	r3, [r7, #16]
  myKeypadStruct.OUT1_Port = GPIOD;
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <main+0x88>)
 8001bf4:	617b      	str	r3, [r7, #20]
  myKeypadStruct.OUT2_Port = GPIOD;
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <main+0x88>)
 8001bf8:	61bb      	str	r3, [r7, #24]
  myKeypadStruct.OUT3_Port = GPIOD;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <main+0x88>)
 8001bfc:	61fb      	str	r3, [r7, #28]

  myKeypadStruct.IN0pin = GPIO_PIN_0;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	843b      	strh	r3, [r7, #32]
  myKeypadStruct.IN1pin = GPIO_PIN_1;
 8001c02:	2302      	movs	r3, #2
 8001c04:	847b      	strh	r3, [r7, #34]	; 0x22
  myKeypadStruct.IN2pin = GPIO_PIN_2;
 8001c06:	2304      	movs	r3, #4
 8001c08:	84bb      	strh	r3, [r7, #36]	; 0x24
  myKeypadStruct.IN3pin = GPIO_PIN_3;
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	84fb      	strh	r3, [r7, #38]	; 0x26
  myKeypadStruct.OUT0pin = GPIO_PIN_4;
 8001c0e:	2310      	movs	r3, #16
 8001c10:	853b      	strh	r3, [r7, #40]	; 0x28
  myKeypadStruct.OUT1pin = GPIO_PIN_5;
 8001c12:	2320      	movs	r3, #32
 8001c14:	857b      	strh	r3, [r7, #42]	; 0x2a
  myKeypadStruct.OUT2pin = GPIO_PIN_6;
 8001c16:	2340      	movs	r3, #64	; 0x40
 8001c18:	85bb      	strh	r3, [r7, #44]	; 0x2c
  myKeypadStruct.OUT3pin = GPIO_PIN_7;
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	85fb      	strh	r3, [r7, #46]	; 0x2e

  Keypad4x4_Init(&myKeypadStruct);
 8001c1e:	463b      	mov	r3, r7
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fa8f 	bl	8001144 <Keypad4x4_Init>
  LCD1602_Begin4BIT(GPIOE,GPIO_PIN_0,GPIO_PIN_1,GPIOB,GPIO_PIN_4,GPIO_PIN_5,GPIO_PIN_6,GPIO_PIN_7);
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	9303      	str	r3, [sp, #12]
 8001c2a:	2340      	movs	r3, #64	; 0x40
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	2320      	movs	r3, #32
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	2310      	movs	r3, #16
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <main+0x8c>)
 8001c38:	2202      	movs	r2, #2
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	4806      	ldr	r0, [pc, #24]	; (8001c58 <main+0x90>)
 8001c3e:	f7ff fd43 	bl	80016c8 <LCD1602_Begin4BIT>

  //	HAL_Delay(1);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001c42:	f002 f827 	bl	8003c94 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001c46:	f7ff feeb 	bl	8001a20 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001c4a:	f002 f847 	bl	8003cdc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <main+0x86>
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40021000 	.word	0x40021000

08001c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b094      	sub	sp, #80	; 0x50
 8001c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c62:	f107 0320 	add.w	r3, r7, #32
 8001c66:	2230      	movs	r2, #48	; 0x30
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 fddc 	bl	8006828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <SystemClock_Config+0xb4>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <SystemClock_Config+0xb4>)
 8001c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c90:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <SystemClock_Config+0xb4>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <SystemClock_Config+0xb8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1b      	ldr	r2, [pc, #108]	; (8001d14 <SystemClock_Config+0xb8>)
 8001ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <SystemClock_Config+0xb8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc0:	2310      	movs	r3, #16
 8001cc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 fcbd 	bl	800264c <HAL_RCC_OscConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001cd8:	f000 f830 	bl	8001d3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cdc:	230f      	movs	r3, #15
 8001cde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 ff20 	bl	8002b3c <HAL_RCC_ClockConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001d02:	f000 f81b 	bl	8001d3c <Error_Handler>
  }
}
 8001d06:	bf00      	nop
 8001d08:	3750      	adds	r7, #80	; 0x50
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000

08001d18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d2a:	f000 f981 	bl	8002030 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40010000 	.word	0x40010000

08001d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d40:	b672      	cpsid	i
}
 8001d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <Error_Handler+0x8>
	...

08001d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_MspInit+0x54>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <HAL_MspInit+0x54>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_MspInit+0x54>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_MspInit+0x54>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <HAL_MspInit+0x54>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_MspInit+0x54>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	210f      	movs	r1, #15
 8001d8a:	f06f 0001 	mvn.w	r0, #1
 8001d8e:	f000 fa4b 	bl	8002228 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	; 0x30
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	2019      	movs	r0, #25
 8001db6:	f000 fa37 	bl	8002228 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dba:	2019      	movs	r0, #25
 8001dbc:	f000 fa50 	bl	8002260 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_InitTick+0xa0>)
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_InitTick+0xa0>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_InitTick+0xa0>)
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ddc:	f107 0210 	add.w	r2, r7, #16
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f001 f878 	bl	8002edc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001dec:	f001 f862 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8001df0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <HAL_InitTick+0xa4>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0c9b      	lsrs	r3, r3, #18
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <HAL_InitTick+0xac>)
 8001e04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e20:	4809      	ldr	r0, [pc, #36]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e22:	f001 f88d 	bl	8002f40 <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d104      	bne.n	8001e36 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e2c:	4806      	ldr	r0, [pc, #24]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e2e:	f001 f8e1 	bl	8002ff4 <HAL_TIM_Base_Start_IT>
 8001e32:	4603      	mov	r3, r0
 8001e34:	e000      	b.n	8001e38 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3730      	adds	r7, #48	; 0x30
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	431bde83 	.word	0x431bde83
 8001e48:	200047fc 	.word	0x200047fc
 8001e4c:	40010000 	.word	0x40010000

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <NMI_Handler+0x4>

08001e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <HardFault_Handler+0x4>

08001e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <MemManage_Handler+0x4>

08001e62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <BusFault_Handler+0x4>

08001e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <UsageFault_Handler+0x4>

08001e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e82:	f001 f927 	bl	80030d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200047fc 	.word	0x200047fc

08001e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <SystemInit+0x20>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <SystemInit+0x20>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_UART4_Init+0x4c>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <MX_UART4_Init+0x50>)
 8001ebc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <MX_UART4_Init+0x4c>)
 8001ec0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ec4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_UART4_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_UART4_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_UART4_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_UART4_Init+0x4c>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_UART4_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_UART4_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_UART4_Init+0x4c>)
 8001eec:	f001 fad6 	bl	800349c <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001ef6:	f7ff ff21 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20004844 	.word	0x20004844
 8001f04:	40004c00 	.word	0x40004c00

08001f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <HAL_UART_MspInit+0x84>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d12b      	bne.n	8001f82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <HAL_UART_MspInit+0x88>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <HAL_UART_MspInit+0x88>)
 8001f34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_UART_MspInit+0x88>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <HAL_UART_MspInit+0x88>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <HAL_UART_MspInit+0x88>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <HAL_UART_MspInit+0x88>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f62:	2303      	movs	r3, #3
 8001f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f72:	2308      	movs	r3, #8
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4805      	ldr	r0, [pc, #20]	; (8001f94 <HAL_UART_MspInit+0x8c>)
 8001f7e:	f000 f97d 	bl	800227c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	; 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40004c00 	.word	0x40004c00
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020000 	.word	0x40020000

08001f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f9c:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f9e:	490e      	ldr	r1, [pc, #56]	; (8001fd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fb4:	4c0b      	ldr	r4, [pc, #44]	; (8001fe4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fc2:	f7ff ff65 	bl	8001e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f004 fbe1 	bl	800678c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fca:	f7ff fdfd 	bl	8001bc8 <main>
  bx  lr    
 8001fce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001fdc:	08006be0 	.word	0x08006be0
  ldr r2, =_sbss
 8001fe0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001fe4:	200048d8 	.word	0x200048d8

08001fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe8:	e7fe      	b.n	8001fe8 <ADC_IRQHandler>
	...

08001fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <HAL_Init+0x40>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_Init+0x40>)
 8002002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_Init+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <HAL_Init+0x40>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002014:	2003      	movs	r0, #3
 8002016:	f000 f8fc 	bl	8002212 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800201a:	200f      	movs	r0, #15
 800201c:	f7ff fec0 	bl	8001da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002020:	f7ff fe92 	bl	8001d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023c00 	.word	0x40023c00

08002030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_IncTick+0x20>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_IncTick+0x24>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4413      	add	r3, r2
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <HAL_IncTick+0x24>)
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000010 	.word	0x20000010
 8002054:	20004888 	.word	0x20004888

08002058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return uwTick;
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <HAL_GetTick+0x14>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	20004888 	.word	0x20004888

08002070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff ffee 	bl	8002058 <HAL_GetTick>
 800207c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002088:	d005      	beq.n	8002096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_Delay+0x44>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002096:	bf00      	nop
 8002098:	f7ff ffde 	bl	8002058 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d8f7      	bhi.n	8002098 <HAL_Delay+0x28>
  {
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000010 	.word	0x20000010

080020b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d4:	4013      	ands	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ea:	4a04      	ldr	r2, [pc, #16]	; (80020fc <__NVIC_SetPriorityGrouping+0x44>)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	60d3      	str	r3, [r2, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <__NVIC_GetPriorityGrouping+0x18>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	f003 0307 	and.w	r3, r3, #7
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	2b00      	cmp	r3, #0
 800212c:	db0b      	blt.n	8002146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	f003 021f 	and.w	r2, r3, #31
 8002134:	4907      	ldr	r1, [pc, #28]	; (8002154 <__NVIC_EnableIRQ+0x38>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2001      	movs	r0, #1
 800213e:	fa00 f202 	lsl.w	r2, r0, r2
 8002142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000e100 	.word	0xe000e100

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0a      	blt.n	8002182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	490c      	ldr	r1, [pc, #48]	; (80021a4 <__NVIC_SetPriority+0x4c>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	440b      	add	r3, r1
 800217c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002180:	e00a      	b.n	8002198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4908      	ldr	r1, [pc, #32]	; (80021a8 <__NVIC_SetPriority+0x50>)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3b04      	subs	r3, #4
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	440b      	add	r3, r1
 8002196:	761a      	strb	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000e100 	.word	0xe000e100
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f1c3 0307 	rsb	r3, r3, #7
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	bf28      	it	cs
 80021ca:	2304      	movcs	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d902      	bls.n	80021dc <NVIC_EncodePriority+0x30>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3b03      	subs	r3, #3
 80021da:	e000      	b.n	80021de <NVIC_EncodePriority+0x32>
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	401a      	ands	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43d9      	mvns	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	4313      	orrs	r3, r2
         );
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	; 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ff4c 	bl	80020b8 <__NVIC_SetPriorityGrouping>
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800223a:	f7ff ff61 	bl	8002100 <__NVIC_GetPriorityGrouping>
 800223e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	6978      	ldr	r0, [r7, #20]
 8002246:	f7ff ffb1 	bl	80021ac <NVIC_EncodePriority>
 800224a:	4602      	mov	r2, r0
 800224c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ff80 	bl	8002158 <__NVIC_SetPriority>
}
 8002258:	bf00      	nop
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff54 	bl	800211c <__NVIC_EnableIRQ>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	e16b      	b.n	8002570 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002298:	2201      	movs	r2, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	f040 815a 	bne.w	800256a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d005      	beq.n	80022ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d130      	bne.n	8002330 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	2203      	movs	r2, #3
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002304:	2201      	movs	r2, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 0201 	and.w	r2, r3, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b03      	cmp	r3, #3
 800233a:	d017      	beq.n	800236c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d123      	bne.n	80023c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	08da      	lsrs	r2, r3, #3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3208      	adds	r2, #8
 8002380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	220f      	movs	r2, #15
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	08da      	lsrs	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3208      	adds	r2, #8
 80023ba:	69b9      	ldr	r1, [r7, #24]
 80023bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0203 	and.w	r2, r3, #3
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80b4 	beq.w	800256a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b60      	ldr	r3, [pc, #384]	; (8002588 <HAL_GPIO_Init+0x30c>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	4a5f      	ldr	r2, [pc, #380]	; (8002588 <HAL_GPIO_Init+0x30c>)
 800240c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002410:	6453      	str	r3, [r2, #68]	; 0x44
 8002412:	4b5d      	ldr	r3, [pc, #372]	; (8002588 <HAL_GPIO_Init+0x30c>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800241e:	4a5b      	ldr	r2, [pc, #364]	; (800258c <HAL_GPIO_Init+0x310>)
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3302      	adds	r3, #2
 8002426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	220f      	movs	r2, #15
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a52      	ldr	r2, [pc, #328]	; (8002590 <HAL_GPIO_Init+0x314>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d02b      	beq.n	80024a2 <HAL_GPIO_Init+0x226>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a51      	ldr	r2, [pc, #324]	; (8002594 <HAL_GPIO_Init+0x318>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d025      	beq.n	800249e <HAL_GPIO_Init+0x222>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a50      	ldr	r2, [pc, #320]	; (8002598 <HAL_GPIO_Init+0x31c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01f      	beq.n	800249a <HAL_GPIO_Init+0x21e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4f      	ldr	r2, [pc, #316]	; (800259c <HAL_GPIO_Init+0x320>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d019      	beq.n	8002496 <HAL_GPIO_Init+0x21a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4e      	ldr	r2, [pc, #312]	; (80025a0 <HAL_GPIO_Init+0x324>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_GPIO_Init+0x216>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4d      	ldr	r2, [pc, #308]	; (80025a4 <HAL_GPIO_Init+0x328>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00d      	beq.n	800248e <HAL_GPIO_Init+0x212>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4c      	ldr	r2, [pc, #304]	; (80025a8 <HAL_GPIO_Init+0x32c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d007      	beq.n	800248a <HAL_GPIO_Init+0x20e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4b      	ldr	r2, [pc, #300]	; (80025ac <HAL_GPIO_Init+0x330>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_GPIO_Init+0x20a>
 8002482:	2307      	movs	r3, #7
 8002484:	e00e      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 8002486:	2308      	movs	r3, #8
 8002488:	e00c      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 800248a:	2306      	movs	r3, #6
 800248c:	e00a      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 800248e:	2305      	movs	r3, #5
 8002490:	e008      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 8002492:	2304      	movs	r3, #4
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 8002496:	2303      	movs	r3, #3
 8002498:	e004      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 800249a:	2302      	movs	r3, #2
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_GPIO_Init+0x228>
 80024a2:	2300      	movs	r3, #0
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	f002 0203 	and.w	r2, r2, #3
 80024aa:	0092      	lsls	r2, r2, #2
 80024ac:	4093      	lsls	r3, r2
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b4:	4935      	ldr	r1, [pc, #212]	; (800258c <HAL_GPIO_Init+0x310>)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3302      	adds	r3, #2
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c2:	4b3b      	ldr	r3, [pc, #236]	; (80025b0 <HAL_GPIO_Init+0x334>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e6:	4a32      	ldr	r2, [pc, #200]	; (80025b0 <HAL_GPIO_Init+0x334>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024ec:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <HAL_GPIO_Init+0x334>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002510:	4a27      	ldr	r2, [pc, #156]	; (80025b0 <HAL_GPIO_Init+0x334>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <HAL_GPIO_Init+0x334>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253a:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_GPIO_Init+0x334>)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_GPIO_Init+0x334>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002564:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <HAL_GPIO_Init+0x334>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3301      	adds	r3, #1
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b0f      	cmp	r3, #15
 8002574:	f67f ae90 	bls.w	8002298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40013800 	.word	0x40013800
 8002590:	40020000 	.word	0x40020000
 8002594:	40020400 	.word	0x40020400
 8002598:	40020800 	.word	0x40020800
 800259c:	40020c00 	.word	0x40020c00
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40021400 	.word	0x40021400
 80025a8:	40021800 	.word	0x40021800
 80025ac:	40021c00 	.word	0x40021c00
 80025b0:	40013c00 	.word	0x40013c00

080025b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
 80025d0:	e001      	b.n	80025d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
 80025f0:	4613      	mov	r3, r2
 80025f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f4:	787b      	ldrb	r3, [r7, #1]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002600:	e003      	b.n	800260a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	041a      	lsls	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	619a      	str	r2, [r3, #24]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002628:	887a      	ldrh	r2, [r7, #2]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4013      	ands	r3, r2
 800262e:	041a      	lsls	r2, r3, #16
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	43d9      	mvns	r1, r3
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	400b      	ands	r3, r1
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	619a      	str	r2, [r3, #24]
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e264      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d075      	beq.n	8002756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800266a:	4ba3      	ldr	r3, [pc, #652]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b04      	cmp	r3, #4
 8002674:	d00c      	beq.n	8002690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002676:	4ba0      	ldr	r3, [pc, #640]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800267e:	2b08      	cmp	r3, #8
 8002680:	d112      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002682:	4b9d      	ldr	r3, [pc, #628]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800268e:	d10b      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	4b99      	ldr	r3, [pc, #612]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d05b      	beq.n	8002754 <HAL_RCC_OscConfig+0x108>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d157      	bne.n	8002754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e23f      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b0:	d106      	bne.n	80026c0 <HAL_RCC_OscConfig+0x74>
 80026b2:	4b91      	ldr	r3, [pc, #580]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a90      	ldr	r2, [pc, #576]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e01d      	b.n	80026fc <HAL_RCC_OscConfig+0xb0>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x98>
 80026ca:	4b8b      	ldr	r3, [pc, #556]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a8a      	ldr	r2, [pc, #552]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b88      	ldr	r3, [pc, #544]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a87      	ldr	r2, [pc, #540]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0xb0>
 80026e4:	4b84      	ldr	r3, [pc, #528]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a83      	ldr	r2, [pc, #524]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	4b81      	ldr	r3, [pc, #516]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a80      	ldr	r2, [pc, #512]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80026f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7ff fca8 	bl	8002058 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800270c:	f7ff fca4 	bl	8002058 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e204      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	4b76      	ldr	r3, [pc, #472]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0xc0>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7ff fc94 	bl	8002058 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002734:	f7ff fc90 	bl	8002058 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e1f0      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	4b6c      	ldr	r3, [pc, #432]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0xe8>
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d063      	beq.n	800282a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002762:	4b65      	ldr	r3, [pc, #404]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276e:	4b62      	ldr	r3, [pc, #392]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002776:	2b08      	cmp	r3, #8
 8002778:	d11c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277a:	4b5f      	ldr	r3, [pc, #380]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d116      	bne.n	80027b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	4b5c      	ldr	r3, [pc, #368]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <HAL_RCC_OscConfig+0x152>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d001      	beq.n	800279e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e1c4      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279e:	4b56      	ldr	r3, [pc, #344]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4952      	ldr	r1, [pc, #328]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b2:	e03a      	b.n	800282a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027bc:	4b4f      	ldr	r3, [pc, #316]	; (80028fc <HAL_RCC_OscConfig+0x2b0>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7ff fc49 	bl	8002058 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ca:	f7ff fc45 	bl	8002058 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e1a5      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027dc:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e8:	4b43      	ldr	r3, [pc, #268]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4940      	ldr	r1, [pc, #256]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]
 80027fc:	e015      	b.n	800282a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fe:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <HAL_RCC_OscConfig+0x2b0>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002804:	f7ff fc28 	bl	8002058 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800280c:	f7ff fc24 	bl	8002058 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e184      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281e:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d030      	beq.n	8002898 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d016      	beq.n	800286c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283e:	4b30      	ldr	r3, [pc, #192]	; (8002900 <HAL_RCC_OscConfig+0x2b4>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7ff fc08 	bl	8002058 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800284c:	f7ff fc04 	bl	8002058 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e164      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285e:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x200>
 800286a:	e015      	b.n	8002898 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800286c:	4b24      	ldr	r3, [pc, #144]	; (8002900 <HAL_RCC_OscConfig+0x2b4>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002872:	f7ff fbf1 	bl	8002058 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287a:	f7ff fbed 	bl	8002058 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e14d      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 800288e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a0 	beq.w	80029e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10f      	bne.n	80028d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	6413      	str	r3, [r2, #64]	; 0x40
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_OscConfig+0x2b8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d121      	bne.n	8002926 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <HAL_RCC_OscConfig+0x2b8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_RCC_OscConfig+0x2b8>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7ff fbb3 	bl	8002058 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e011      	b.n	800291a <HAL_RCC_OscConfig+0x2ce>
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	42470000 	.word	0x42470000
 8002900:	42470e80 	.word	0x42470e80
 8002904:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002908:	f7ff fba6 	bl	8002058 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e106      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b85      	ldr	r3, [pc, #532]	; (8002b30 <HAL_RCC_OscConfig+0x4e4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d106      	bne.n	800293c <HAL_RCC_OscConfig+0x2f0>
 800292e:	4b81      	ldr	r3, [pc, #516]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	4a80      	ldr	r2, [pc, #512]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6713      	str	r3, [r2, #112]	; 0x70
 800293a:	e01c      	b.n	8002976 <HAL_RCC_OscConfig+0x32a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b05      	cmp	r3, #5
 8002942:	d10c      	bne.n	800295e <HAL_RCC_OscConfig+0x312>
 8002944:	4b7b      	ldr	r3, [pc, #492]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	4a7a      	ldr	r2, [pc, #488]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 800294a:	f043 0304 	orr.w	r3, r3, #4
 800294e:	6713      	str	r3, [r2, #112]	; 0x70
 8002950:	4b78      	ldr	r3, [pc, #480]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	4a77      	ldr	r2, [pc, #476]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6713      	str	r3, [r2, #112]	; 0x70
 800295c:	e00b      	b.n	8002976 <HAL_RCC_OscConfig+0x32a>
 800295e:	4b75      	ldr	r3, [pc, #468]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	4a74      	ldr	r2, [pc, #464]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6713      	str	r3, [r2, #112]	; 0x70
 800296a:	4b72      	ldr	r3, [pc, #456]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	4a71      	ldr	r2, [pc, #452]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d015      	beq.n	80029aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297e:	f7ff fb6b 	bl	8002058 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7ff fb67 	bl	8002058 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e0c5      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299c:	4b65      	ldr	r3, [pc, #404]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ee      	beq.n	8002986 <HAL_RCC_OscConfig+0x33a>
 80029a8:	e014      	b.n	80029d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029aa:	f7ff fb55 	bl	8002058 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b0:	e00a      	b.n	80029c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b2:	f7ff fb51 	bl	8002058 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e0af      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c8:	4b5a      	ldr	r3, [pc, #360]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 80029ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ee      	bne.n	80029b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d105      	bne.n	80029e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029da:	4b56      	ldr	r3, [pc, #344]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a55      	ldr	r2, [pc, #340]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 80029e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 809b 	beq.w	8002b26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029f0:	4b50      	ldr	r3, [pc, #320]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 030c 	and.w	r3, r3, #12
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d05c      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d141      	bne.n	8002a88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a04:	4b4c      	ldr	r3, [pc, #304]	; (8002b38 <HAL_RCC_OscConfig+0x4ec>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7ff fb25 	bl	8002058 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a12:	f7ff fb21 	bl	8002058 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e081      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a24:	4b43      	ldr	r3, [pc, #268]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f0      	bne.n	8002a12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	019b      	lsls	r3, r3, #6
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	041b      	lsls	r3, r3, #16
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	061b      	lsls	r3, r3, #24
 8002a54:	4937      	ldr	r1, [pc, #220]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a5a:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_RCC_OscConfig+0x4ec>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7ff fafa 	bl	8002058 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a68:	f7ff faf6 	bl	8002058 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e056      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7a:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0x41c>
 8002a86:	e04e      	b.n	8002b26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a88:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_RCC_OscConfig+0x4ec>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7ff fae3 	bl	8002058 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a96:	f7ff fadf 	bl	8002058 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e03f      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCC_OscConfig+0x44a>
 8002ab4:	e037      	b.n	8002b26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e032      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <HAL_RCC_OscConfig+0x4e8>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d028      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d121      	bne.n	8002b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d11a      	bne.n	8002b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002af2:	4013      	ands	r3, r2
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002af8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d111      	bne.n	8002b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40007000 	.word	0x40007000
 8002b34:	40023800 	.word	0x40023800
 8002b38:	42470060 	.word	0x42470060

08002b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0cc      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b50:	4b68      	ldr	r3, [pc, #416]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d90c      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b65      	ldr	r3, [pc, #404]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b63      	ldr	r3, [pc, #396]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0b8      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d020      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b90:	4b59      	ldr	r3, [pc, #356]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a58      	ldr	r2, [pc, #352]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba8:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4a52      	ldr	r2, [pc, #328]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb4:	4b50      	ldr	r3, [pc, #320]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	494d      	ldr	r1, [pc, #308]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d044      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bda:	4b47      	ldr	r3, [pc, #284]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d119      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e07f      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d107      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfa:	4b3f      	ldr	r3, [pc, #252]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e06f      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0a:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e067      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1a:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f023 0203 	bic.w	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4934      	ldr	r1, [pc, #208]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c2c:	f7ff fa14 	bl	8002058 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c34:	f7ff fa10 	bl	8002058 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e04f      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4a:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 020c 	and.w	r2, r3, #12
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d1eb      	bne.n	8002c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d20c      	bcs.n	8002c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e032      	b.n	8002cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4916      	ldr	r1, [pc, #88]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	490e      	ldr	r1, [pc, #56]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cc2:	f000 f821 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	490a      	ldr	r1, [pc, #40]	; (8002cfc <HAL_RCC_ClockConfig+0x1c0>)
 8002cd4:	5ccb      	ldrb	r3, [r1, r3]
 8002cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cda:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff f85c 	bl	8001da0 <HAL_InitTick>

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023c00 	.word	0x40023c00
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	08006b30 	.word	0x08006b30
 8002d00:	20000008 	.word	0x20000008
 8002d04:	2000000c 	.word	0x2000000c

08002d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d08:	b5b0      	push	{r4, r5, r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d0e:	2100      	movs	r1, #0
 8002d10:	6079      	str	r1, [r7, #4]
 8002d12:	2100      	movs	r1, #0
 8002d14:	60f9      	str	r1, [r7, #12]
 8002d16:	2100      	movs	r1, #0
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1e:	4952      	ldr	r1, [pc, #328]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d20:	6889      	ldr	r1, [r1, #8]
 8002d22:	f001 010c 	and.w	r1, r1, #12
 8002d26:	2908      	cmp	r1, #8
 8002d28:	d00d      	beq.n	8002d46 <HAL_RCC_GetSysClockFreq+0x3e>
 8002d2a:	2908      	cmp	r1, #8
 8002d2c:	f200 8094 	bhi.w	8002e58 <HAL_RCC_GetSysClockFreq+0x150>
 8002d30:	2900      	cmp	r1, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0x32>
 8002d34:	2904      	cmp	r1, #4
 8002d36:	d003      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0x38>
 8002d38:	e08e      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d3a:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x164>)
 8002d3c:	60bb      	str	r3, [r7, #8]
       break;
 8002d3e:	e08e      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d40:	4b4b      	ldr	r3, [pc, #300]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d42:	60bb      	str	r3, [r7, #8]
      break;
 8002d44:	e08b      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d46:	4948      	ldr	r1, [pc, #288]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d48:	6849      	ldr	r1, [r1, #4]
 8002d4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002d4e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d50:	4945      	ldr	r1, [pc, #276]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d52:	6849      	ldr	r1, [r1, #4]
 8002d54:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002d58:	2900      	cmp	r1, #0
 8002d5a:	d024      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5c:	4942      	ldr	r1, [pc, #264]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d5e:	6849      	ldr	r1, [r1, #4]
 8002d60:	0989      	lsrs	r1, r1, #6
 8002d62:	4608      	mov	r0, r1
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002d6c:	f04f 0500 	mov.w	r5, #0
 8002d70:	ea00 0204 	and.w	r2, r0, r4
 8002d74:	ea01 0305 	and.w	r3, r1, r5
 8002d78:	493d      	ldr	r1, [pc, #244]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d7a:	fb01 f003 	mul.w	r0, r1, r3
 8002d7e:	2100      	movs	r1, #0
 8002d80:	fb01 f102 	mul.w	r1, r1, r2
 8002d84:	1844      	adds	r4, r0, r1
 8002d86:	493a      	ldr	r1, [pc, #232]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d88:	fba2 0101 	umull	r0, r1, r2, r1
 8002d8c:	1863      	adds	r3, r4, r1
 8002d8e:	4619      	mov	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	461a      	mov	r2, r3
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	f7fd fe80 	bl	8000a9c <__aeabi_uldivmod>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4613      	mov	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e04a      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da6:	4b30      	ldr	r3, [pc, #192]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	099b      	lsrs	r3, r3, #6
 8002dac:	461a      	mov	r2, r3
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	ea02 0400 	and.w	r4, r2, r0
 8002dbe:	ea03 0501 	and.w	r5, r3, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	014b      	lsls	r3, r1, #5
 8002dd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002dd4:	0142      	lsls	r2, r0, #5
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	1b00      	subs	r0, r0, r4
 8002ddc:	eb61 0105 	sbc.w	r1, r1, r5
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	018b      	lsls	r3, r1, #6
 8002dea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dee:	0182      	lsls	r2, r0, #6
 8002df0:	1a12      	subs	r2, r2, r0
 8002df2:	eb63 0301 	sbc.w	r3, r3, r1
 8002df6:	f04f 0000 	mov.w	r0, #0
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	00d9      	lsls	r1, r3, #3
 8002e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e04:	00d0      	lsls	r0, r2, #3
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	1912      	adds	r2, r2, r4
 8002e0c:	eb45 0303 	adc.w	r3, r5, r3
 8002e10:	f04f 0000 	mov.w	r0, #0
 8002e14:	f04f 0100 	mov.w	r1, #0
 8002e18:	0299      	lsls	r1, r3, #10
 8002e1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e1e:	0290      	lsls	r0, r2, #10
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4610      	mov	r0, r2
 8002e26:	4619      	mov	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	f7fd fe34 	bl	8000a9c <__aeabi_uldivmod>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4613      	mov	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e3c:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	0c1b      	lsrs	r3, r3, #16
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	3301      	adds	r3, #1
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	60bb      	str	r3, [r7, #8]
      break;
 8002e56:	e002      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x164>)
 8002e5a:	60bb      	str	r3, [r7, #8]
      break;
 8002e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bdb0      	pop	{r4, r5, r7, pc}
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	00f42400 	.word	0x00f42400
 8002e70:	017d7840 	.word	0x017d7840

08002e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000008 	.word	0x20000008

08002e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e90:	f7ff fff0 	bl	8002e74 <HAL_RCC_GetHCLKFreq>
 8002e94:	4602      	mov	r2, r0
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	0a9b      	lsrs	r3, r3, #10
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	4903      	ldr	r1, [pc, #12]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea2:	5ccb      	ldrb	r3, [r1, r3]
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	08006b40 	.word	0x08006b40

08002eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002eb8:	f7ff ffdc 	bl	8002e74 <HAL_RCC_GetHCLKFreq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	0b5b      	lsrs	r3, r3, #13
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	4903      	ldr	r1, [pc, #12]	; (8002ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eca:	5ccb      	ldrb	r3, [r1, r3]
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	08006b40 	.word	0x08006b40

08002edc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	220f      	movs	r2, #15
 8002eea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_GetClockConfig+0x5c>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0203 	and.w	r2, r3, #3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_RCC_GetClockConfig+0x5c>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_RCC_GetClockConfig+0x5c>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCC_GetClockConfig+0x5c>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	08db      	lsrs	r3, r3, #3
 8002f16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f1e:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <HAL_RCC_GetClockConfig+0x60>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0207 	and.w	r2, r3, #7
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	601a      	str	r2, [r3, #0]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40023c00 	.word	0x40023c00

08002f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e041      	b.n	8002fd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d106      	bne.n	8002f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f839 	bl	8002fde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f000 f9d8 	bl	8003334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b01      	cmp	r3, #1
 8003006:	d001      	beq.n	800300c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e04e      	b.n	80030aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a23      	ldr	r2, [pc, #140]	; (80030b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d022      	beq.n	8003074 <HAL_TIM_Base_Start_IT+0x80>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003036:	d01d      	beq.n	8003074 <HAL_TIM_Base_Start_IT+0x80>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <HAL_TIM_Base_Start_IT+0xc8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d018      	beq.n	8003074 <HAL_TIM_Base_Start_IT+0x80>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d013      	beq.n	8003074 <HAL_TIM_Base_Start_IT+0x80>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00e      	beq.n	8003074 <HAL_TIM_Base_Start_IT+0x80>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d009      	beq.n	8003074 <HAL_TIM_Base_Start_IT+0x80>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a19      	ldr	r2, [pc, #100]	; (80030cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d004      	beq.n	8003074 <HAL_TIM_Base_Start_IT+0x80>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a18      	ldr	r2, [pc, #96]	; (80030d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d111      	bne.n	8003098 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b06      	cmp	r3, #6
 8003084:	d010      	beq.n	80030a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003096:	e007      	b.n	80030a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40010000 	.word	0x40010000
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40000800 	.word	0x40000800
 80030c4:	40000c00 	.word	0x40000c00
 80030c8:	40010400 	.word	0x40010400
 80030cc:	40014000 	.word	0x40014000
 80030d0:	40001800 	.word	0x40001800

080030d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d122      	bne.n	8003130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d11b      	bne.n	8003130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0202 	mvn.w	r2, #2
 8003100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f8ee 	bl	80032f8 <HAL_TIM_IC_CaptureCallback>
 800311c:	e005      	b.n	800312a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f8e0 	bl	80032e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f8f1 	bl	800330c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b04      	cmp	r3, #4
 800313c:	d122      	bne.n	8003184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b04      	cmp	r3, #4
 800314a:	d11b      	bne.n	8003184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0204 	mvn.w	r2, #4
 8003154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2202      	movs	r2, #2
 800315a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8c4 	bl	80032f8 <HAL_TIM_IC_CaptureCallback>
 8003170:	e005      	b.n	800317e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8b6 	bl	80032e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f8c7 	bl	800330c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b08      	cmp	r3, #8
 8003190:	d122      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b08      	cmp	r3, #8
 800319e:	d11b      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0208 	mvn.w	r2, #8
 80031a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2204      	movs	r2, #4
 80031ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f89a 	bl	80032f8 <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f88c 	bl	80032e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f89d 	bl	800330c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b10      	cmp	r3, #16
 80031e4:	d122      	bne.n	800322c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d11b      	bne.n	800322c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0210 	mvn.w	r2, #16
 80031fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2208      	movs	r2, #8
 8003202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f870 	bl	80032f8 <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f862 	bl	80032e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f873 	bl	800330c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b01      	cmp	r3, #1
 8003238:	d10e      	bne.n	8003258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0201 	mvn.w	r2, #1
 8003250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fe fd60 	bl	8001d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003262:	2b80      	cmp	r3, #128	; 0x80
 8003264:	d10e      	bne.n	8003284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d107      	bne.n	8003284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800327c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f902 	bl	8003488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b40      	cmp	r3, #64	; 0x40
 8003290:	d10e      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329c:	2b40      	cmp	r3, #64	; 0x40
 800329e:	d107      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f838 	bl	8003320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d10e      	bne.n	80032dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d107      	bne.n	80032dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0220 	mvn.w	r2, #32
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f8cc 	bl	8003474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a40      	ldr	r2, [pc, #256]	; (8003448 <TIM_Base_SetConfig+0x114>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003352:	d00f      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a3d      	ldr	r2, [pc, #244]	; (800344c <TIM_Base_SetConfig+0x118>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00b      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a3c      	ldr	r2, [pc, #240]	; (8003450 <TIM_Base_SetConfig+0x11c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d007      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a3b      	ldr	r2, [pc, #236]	; (8003454 <TIM_Base_SetConfig+0x120>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d003      	beq.n	8003374 <TIM_Base_SetConfig+0x40>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a3a      	ldr	r2, [pc, #232]	; (8003458 <TIM_Base_SetConfig+0x124>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d108      	bne.n	8003386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a2f      	ldr	r2, [pc, #188]	; (8003448 <TIM_Base_SetConfig+0x114>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d02b      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003394:	d027      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a2c      	ldr	r2, [pc, #176]	; (800344c <TIM_Base_SetConfig+0x118>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d023      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a2b      	ldr	r2, [pc, #172]	; (8003450 <TIM_Base_SetConfig+0x11c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01f      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a2a      	ldr	r2, [pc, #168]	; (8003454 <TIM_Base_SetConfig+0x120>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d01b      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a29      	ldr	r2, [pc, #164]	; (8003458 <TIM_Base_SetConfig+0x124>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d017      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a28      	ldr	r2, [pc, #160]	; (800345c <TIM_Base_SetConfig+0x128>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a27      	ldr	r2, [pc, #156]	; (8003460 <TIM_Base_SetConfig+0x12c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00f      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a26      	ldr	r2, [pc, #152]	; (8003464 <TIM_Base_SetConfig+0x130>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00b      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a25      	ldr	r2, [pc, #148]	; (8003468 <TIM_Base_SetConfig+0x134>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d007      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a24      	ldr	r2, [pc, #144]	; (800346c <TIM_Base_SetConfig+0x138>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d003      	beq.n	80033e6 <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a23      	ldr	r2, [pc, #140]	; (8003470 <TIM_Base_SetConfig+0x13c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d108      	bne.n	80033f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	4313      	orrs	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <TIM_Base_SetConfig+0x114>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d003      	beq.n	800342c <TIM_Base_SetConfig+0xf8>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a0c      	ldr	r2, [pc, #48]	; (8003458 <TIM_Base_SetConfig+0x124>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d103      	bne.n	8003434 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	615a      	str	r2, [r3, #20]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40010000 	.word	0x40010000
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800
 8003454:	40000c00 	.word	0x40000c00
 8003458:	40010400 	.word	0x40010400
 800345c:	40014000 	.word	0x40014000
 8003460:	40014400 	.word	0x40014400
 8003464:	40014800 	.word	0x40014800
 8003468:	40001800 	.word	0x40001800
 800346c:	40001c00 	.word	0x40001c00
 8003470:	40002000 	.word	0x40002000

08003474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e03f      	b.n	800352e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fe fd20 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2224      	movs	r2, #36	; 0x24
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f9cb 	bl	800387c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695a      	ldr	r2, [r3, #20]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b08a      	sub	sp, #40	; 0x28
 800353a:	af02      	add	r7, sp, #8
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b20      	cmp	r3, #32
 8003554:	d17c      	bne.n	8003650 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_UART_Transmit+0x2c>
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e075      	b.n	8003652 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_UART_Transmit+0x3e>
 8003570:	2302      	movs	r3, #2
 8003572:	e06e      	b.n	8003652 <HAL_UART_Transmit+0x11c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2221      	movs	r2, #33	; 0x21
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800358a:	f7fe fd65 	bl	8002058 <HAL_GetTick>
 800358e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	88fa      	ldrh	r2, [r7, #6]
 8003594:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a4:	d108      	bne.n	80035b8 <HAL_UART_Transmit+0x82>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d104      	bne.n	80035b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	e003      	b.n	80035c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035c8:	e02a      	b.n	8003620 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f8e2 	bl	800379e <UART_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e036      	b.n	8003652 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	3302      	adds	r3, #2
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	e007      	b.n	8003612 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	3301      	adds	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b29a      	uxth	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1cf      	bne.n	80035ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2200      	movs	r2, #0
 8003632:	2140      	movs	r1, #64	; 0x40
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f8b2 	bl	800379e <UART_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e006      	b.n	8003652 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	e000      	b.n	8003652 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b08a      	sub	sp, #40	; 0x28
 800365e:	af02      	add	r7, sp, #8
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b20      	cmp	r3, #32
 8003678:	f040 808c 	bne.w	8003794 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_UART_Receive+0x2e>
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e084      	b.n	8003796 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_UART_Receive+0x40>
 8003696:	2302      	movs	r3, #2
 8003698:	e07d      	b.n	8003796 <HAL_UART_Receive+0x13c>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2222      	movs	r2, #34	; 0x22
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036b6:	f7fe fccf 	bl	8002058 <HAL_GetTick>
 80036ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	88fa      	ldrh	r2, [r7, #6]
 80036c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	88fa      	ldrh	r2, [r7, #6]
 80036c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d0:	d108      	bne.n	80036e4 <HAL_UART_Receive+0x8a>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e003      	b.n	80036ec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80036f4:	e043      	b.n	800377e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2200      	movs	r2, #0
 80036fe:	2120      	movs	r1, #32
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f84c 	bl	800379e <UART_WaitOnFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e042      	b.n	8003796 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10c      	bne.n	8003730 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	b29b      	uxth	r3, r3
 800371e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003722:	b29a      	uxth	r2, r3
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	3302      	adds	r3, #2
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	e01f      	b.n	8003770 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003738:	d007      	beq.n	800374a <HAL_UART_Receive+0xf0>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10a      	bne.n	8003758 <HAL_UART_Receive+0xfe>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	e008      	b.n	800376a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003764:	b2da      	uxtb	r2, r3
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3301      	adds	r3, #1
 800376e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1b6      	bne.n	80036f6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e000      	b.n	8003796 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003794:	2302      	movs	r3, #2
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	3720      	adds	r7, #32
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b090      	sub	sp, #64	; 0x40
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	4613      	mov	r3, r2
 80037ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ae:	e050      	b.n	8003852 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b6:	d04c      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d007      	beq.n	80037ce <UART_WaitOnFlagUntilTimeout+0x30>
 80037be:	f7fe fc4b 	bl	8002058 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d241      	bcs.n	8003852 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	330c      	adds	r3, #12
 80037d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037ee:	637a      	str	r2, [r7, #52]	; 0x34
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e5      	bne.n	80037ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3314      	adds	r3, #20
 8003808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	613b      	str	r3, [r7, #16]
   return(result);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	63bb      	str	r3, [r7, #56]	; 0x38
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3314      	adds	r3, #20
 8003820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003822:	623a      	str	r2, [r7, #32]
 8003824:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	69f9      	ldr	r1, [r7, #28]
 8003828:	6a3a      	ldr	r2, [r7, #32]
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e5      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e00f      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4013      	ands	r3, r2
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	429a      	cmp	r2, r3
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	429a      	cmp	r2, r3
 800386e:	d09f      	beq.n	80037b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3740      	adds	r7, #64	; 0x40
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003880:	b09f      	sub	sp, #124	; 0x7c
 8003882:	af00      	add	r7, sp, #0
 8003884:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003892:	68d9      	ldr	r1, [r3, #12]
 8003894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	ea40 0301 	orr.w	r3, r0, r1
 800389c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800389e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80038b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038c0:	f021 010c 	bic.w	r1, r1, #12
 80038c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ca:	430b      	orrs	r3, r1
 80038cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038da:	6999      	ldr	r1, [r3, #24]
 80038dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	ea40 0301 	orr.w	r3, r0, r1
 80038e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4bc5      	ldr	r3, [pc, #788]	; (8003c00 <UART_SetConfig+0x384>)
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d004      	beq.n	80038fa <UART_SetConfig+0x7e>
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4bc3      	ldr	r3, [pc, #780]	; (8003c04 <UART_SetConfig+0x388>)
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d103      	bne.n	8003902 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038fa:	f7ff fadb 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 80038fe:	6778      	str	r0, [r7, #116]	; 0x74
 8003900:	e002      	b.n	8003908 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003902:	f7ff fac3 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 8003906:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003910:	f040 80b6 	bne.w	8003a80 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003916:	461c      	mov	r4, r3
 8003918:	f04f 0500 	mov.w	r5, #0
 800391c:	4622      	mov	r2, r4
 800391e:	462b      	mov	r3, r5
 8003920:	1891      	adds	r1, r2, r2
 8003922:	6439      	str	r1, [r7, #64]	; 0x40
 8003924:	415b      	adcs	r3, r3
 8003926:	647b      	str	r3, [r7, #68]	; 0x44
 8003928:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800392c:	1912      	adds	r2, r2, r4
 800392e:	eb45 0303 	adc.w	r3, r5, r3
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	00d9      	lsls	r1, r3, #3
 800393c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003940:	00d0      	lsls	r0, r2, #3
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	1911      	adds	r1, r2, r4
 8003948:	6639      	str	r1, [r7, #96]	; 0x60
 800394a:	416b      	adcs	r3, r5
 800394c:	667b      	str	r3, [r7, #100]	; 0x64
 800394e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	461a      	mov	r2, r3
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	1891      	adds	r1, r2, r2
 800395a:	63b9      	str	r1, [r7, #56]	; 0x38
 800395c:	415b      	adcs	r3, r3
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003960:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003964:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003968:	f7fd f898 	bl	8000a9c <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4ba5      	ldr	r3, [pc, #660]	; (8003c08 <UART_SetConfig+0x38c>)
 8003972:	fba3 2302 	umull	r2, r3, r3, r2
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	011e      	lsls	r6, r3, #4
 800397a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800397c:	461c      	mov	r4, r3
 800397e:	f04f 0500 	mov.w	r5, #0
 8003982:	4622      	mov	r2, r4
 8003984:	462b      	mov	r3, r5
 8003986:	1891      	adds	r1, r2, r2
 8003988:	6339      	str	r1, [r7, #48]	; 0x30
 800398a:	415b      	adcs	r3, r3
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
 800398e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003992:	1912      	adds	r2, r2, r4
 8003994:	eb45 0303 	adc.w	r3, r5, r3
 8003998:	f04f 0000 	mov.w	r0, #0
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	00d9      	lsls	r1, r3, #3
 80039a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039a6:	00d0      	lsls	r0, r2, #3
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	1911      	adds	r1, r2, r4
 80039ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80039b0:	416b      	adcs	r3, r5
 80039b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	461a      	mov	r2, r3
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	1891      	adds	r1, r2, r2
 80039c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80039c2:	415b      	adcs	r3, r3
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039ce:	f7fd f865 	bl	8000a9c <__aeabi_uldivmod>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4b8c      	ldr	r3, [pc, #560]	; (8003c08 <UART_SetConfig+0x38c>)
 80039d8:	fba3 1302 	umull	r1, r3, r3, r2
 80039dc:	095b      	lsrs	r3, r3, #5
 80039de:	2164      	movs	r1, #100	; 0x64
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	3332      	adds	r3, #50	; 0x32
 80039ea:	4a87      	ldr	r2, [pc, #540]	; (8003c08 <UART_SetConfig+0x38c>)
 80039ec:	fba2 2303 	umull	r2, r3, r2, r3
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039f8:	441e      	add	r6, r3
 80039fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039fc:	4618      	mov	r0, r3
 80039fe:	f04f 0100 	mov.w	r1, #0
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	1894      	adds	r4, r2, r2
 8003a08:	623c      	str	r4, [r7, #32]
 8003a0a:	415b      	adcs	r3, r3
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a12:	1812      	adds	r2, r2, r0
 8003a14:	eb41 0303 	adc.w	r3, r1, r3
 8003a18:	f04f 0400 	mov.w	r4, #0
 8003a1c:	f04f 0500 	mov.w	r5, #0
 8003a20:	00dd      	lsls	r5, r3, #3
 8003a22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a26:	00d4      	lsls	r4, r2, #3
 8003a28:	4622      	mov	r2, r4
 8003a2a:	462b      	mov	r3, r5
 8003a2c:	1814      	adds	r4, r2, r0
 8003a2e:	653c      	str	r4, [r7, #80]	; 0x50
 8003a30:	414b      	adcs	r3, r1
 8003a32:	657b      	str	r3, [r7, #84]	; 0x54
 8003a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	1891      	adds	r1, r2, r2
 8003a40:	61b9      	str	r1, [r7, #24]
 8003a42:	415b      	adcs	r3, r3
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a4a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a4e:	f7fd f825 	bl	8000a9c <__aeabi_uldivmod>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <UART_SetConfig+0x38c>)
 8003a58:	fba3 1302 	umull	r1, r3, r3, r2
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	2164      	movs	r1, #100	; 0x64
 8003a60:	fb01 f303 	mul.w	r3, r1, r3
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	3332      	adds	r3, #50	; 0x32
 8003a6a:	4a67      	ldr	r2, [pc, #412]	; (8003c08 <UART_SetConfig+0x38c>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	f003 0207 	and.w	r2, r3, #7
 8003a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4432      	add	r2, r6
 8003a7c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a7e:	e0b9      	b.n	8003bf4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a82:	461c      	mov	r4, r3
 8003a84:	f04f 0500 	mov.w	r5, #0
 8003a88:	4622      	mov	r2, r4
 8003a8a:	462b      	mov	r3, r5
 8003a8c:	1891      	adds	r1, r2, r2
 8003a8e:	6139      	str	r1, [r7, #16]
 8003a90:	415b      	adcs	r3, r3
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a98:	1912      	adds	r2, r2, r4
 8003a9a:	eb45 0303 	adc.w	r3, r5, r3
 8003a9e:	f04f 0000 	mov.w	r0, #0
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	00d9      	lsls	r1, r3, #3
 8003aa8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aac:	00d0      	lsls	r0, r2, #3
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	eb12 0804 	adds.w	r8, r2, r4
 8003ab6:	eb43 0905 	adc.w	r9, r3, r5
 8003aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f04f 0100 	mov.w	r1, #0
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	008b      	lsls	r3, r1, #2
 8003ace:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ad2:	0082      	lsls	r2, r0, #2
 8003ad4:	4640      	mov	r0, r8
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	f7fc ffe0 	bl	8000a9c <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4b49      	ldr	r3, [pc, #292]	; (8003c08 <UART_SetConfig+0x38c>)
 8003ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	011e      	lsls	r6, r3, #4
 8003aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aec:	4618      	mov	r0, r3
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	1894      	adds	r4, r2, r2
 8003af8:	60bc      	str	r4, [r7, #8]
 8003afa:	415b      	adcs	r3, r3
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b02:	1812      	adds	r2, r2, r0
 8003b04:	eb41 0303 	adc.w	r3, r1, r3
 8003b08:	f04f 0400 	mov.w	r4, #0
 8003b0c:	f04f 0500 	mov.w	r5, #0
 8003b10:	00dd      	lsls	r5, r3, #3
 8003b12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b16:	00d4      	lsls	r4, r2, #3
 8003b18:	4622      	mov	r2, r4
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	1814      	adds	r4, r2, r0
 8003b1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003b20:	414b      	adcs	r3, r1
 8003b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f04f 0100 	mov.w	r1, #0
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	008b      	lsls	r3, r1, #2
 8003b38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b3c:	0082      	lsls	r2, r0, #2
 8003b3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b42:	f7fc ffab 	bl	8000a9c <__aeabi_uldivmod>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <UART_SetConfig+0x38c>)
 8003b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	2164      	movs	r1, #100	; 0x64
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	3332      	adds	r3, #50	; 0x32
 8003b5e:	4a2a      	ldr	r2, [pc, #168]	; (8003c08 <UART_SetConfig+0x38c>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6a:	441e      	add	r6, r3
 8003b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f04f 0100 	mov.w	r1, #0
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	1894      	adds	r4, r2, r2
 8003b7a:	603c      	str	r4, [r7, #0]
 8003b7c:	415b      	adcs	r3, r3
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b84:	1812      	adds	r2, r2, r0
 8003b86:	eb41 0303 	adc.w	r3, r1, r3
 8003b8a:	f04f 0400 	mov.w	r4, #0
 8003b8e:	f04f 0500 	mov.w	r5, #0
 8003b92:	00dd      	lsls	r5, r3, #3
 8003b94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b98:	00d4      	lsls	r4, r2, #3
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	eb12 0a00 	adds.w	sl, r2, r0
 8003ba2:	eb43 0b01 	adc.w	fp, r3, r1
 8003ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	008b      	lsls	r3, r1, #2
 8003bba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bbe:	0082      	lsls	r2, r0, #2
 8003bc0:	4650      	mov	r0, sl
 8003bc2:	4659      	mov	r1, fp
 8003bc4:	f7fc ff6a 	bl	8000a9c <__aeabi_uldivmod>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <UART_SetConfig+0x38c>)
 8003bce:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2164      	movs	r1, #100	; 0x64
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	3332      	adds	r3, #50	; 0x32
 8003be0:	4a09      	ldr	r2, [pc, #36]	; (8003c08 <UART_SetConfig+0x38c>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4432      	add	r2, r6
 8003bf2:	609a      	str	r2, [r3, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	377c      	adds	r7, #124	; 0x7c
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bfe:	bf00      	nop
 8003c00:	40011000 	.word	0x40011000
 8003c04:	40011400 	.word	0x40011400
 8003c08:	51eb851f 	.word	0x51eb851f

08003c0c <__NVIC_SetPriority>:
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	6039      	str	r1, [r7, #0]
 8003c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	db0a      	blt.n	8003c36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	490c      	ldr	r1, [pc, #48]	; (8003c58 <__NVIC_SetPriority+0x4c>)
 8003c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2a:	0112      	lsls	r2, r2, #4
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	440b      	add	r3, r1
 8003c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c34:	e00a      	b.n	8003c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4908      	ldr	r1, [pc, #32]	; (8003c5c <__NVIC_SetPriority+0x50>)
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	3b04      	subs	r3, #4
 8003c44:	0112      	lsls	r2, r2, #4
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	440b      	add	r3, r1
 8003c4a:	761a      	strb	r2, [r3, #24]
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	e000e100 	.word	0xe000e100
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <SysTick_Handler+0x1c>)
 8003c66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003c68:	f001 fd28 	bl	80056bc <xTaskGetSchedulerState>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d001      	beq.n	8003c76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003c72:	f002 fb11 	bl	8006298 <xPortSysTickHandler>
  }
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	e000e010 	.word	0xe000e010

08003c80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c84:	2100      	movs	r1, #0
 8003c86:	f06f 0004 	mvn.w	r0, #4
 8003c8a:	f7ff ffbf 	bl	8003c0c <__NVIC_SetPriority>
#endif
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c9a:	f3ef 8305 	mrs	r3, IPSR
 8003c9e:	603b      	str	r3, [r7, #0]
  return(result);
 8003ca0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003ca6:	f06f 0305 	mvn.w	r3, #5
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	e00c      	b.n	8003cc8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003cae:	4b0a      	ldr	r3, [pc, #40]	; (8003cd8 <osKernelInitialize+0x44>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d105      	bne.n	8003cc2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003cb6:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <osKernelInitialize+0x44>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	607b      	str	r3, [r7, #4]
 8003cc0:	e002      	b.n	8003cc8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003cc8:	687b      	ldr	r3, [r7, #4]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	200000f0 	.word	0x200000f0

08003cdc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ce2:	f3ef 8305 	mrs	r3, IPSR
 8003ce6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ce8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003cee:	f06f 0305 	mvn.w	r3, #5
 8003cf2:	607b      	str	r3, [r7, #4]
 8003cf4:	e010      	b.n	8003d18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <osKernelStart+0x48>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d109      	bne.n	8003d12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003cfe:	f7ff ffbf 	bl	8003c80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003d02:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <osKernelStart+0x48>)
 8003d04:	2202      	movs	r2, #2
 8003d06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d08:	f001 f87c 	bl	8004e04 <vTaskStartScheduler>
      stat = osOK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	e002      	b.n	8003d18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
 8003d16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d18:	687b      	ldr	r3, [r7, #4]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200000f0 	.word	0x200000f0

08003d28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08e      	sub	sp, #56	; 0x38
 8003d2c:	af04      	add	r7, sp, #16
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d38:	f3ef 8305 	mrs	r3, IPSR
 8003d3c:	617b      	str	r3, [r7, #20]
  return(result);
 8003d3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d17e      	bne.n	8003e42 <osThreadNew+0x11a>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d07b      	beq.n	8003e42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003d4a:	2340      	movs	r3, #64	; 0x40
 8003d4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003d4e:	2318      	movs	r3, #24
 8003d50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003d56:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d045      	beq.n	8003dee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <osThreadNew+0x48>
        name = attr->name;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <osThreadNew+0x6e>
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	2b38      	cmp	r3, #56	; 0x38
 8003d88:	d805      	bhi.n	8003d96 <osThreadNew+0x6e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <osThreadNew+0x72>
        return (NULL);
 8003d96:	2300      	movs	r3, #0
 8003d98:	e054      	b.n	8003e44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	089b      	lsrs	r3, r3, #2
 8003da8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00e      	beq.n	8003dd0 <osThreadNew+0xa8>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2bbb      	cmp	r3, #187	; 0xbb
 8003db8:	d90a      	bls.n	8003dd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d006      	beq.n	8003dd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <osThreadNew+0xa8>
        mem = 1;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	e010      	b.n	8003df2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10c      	bne.n	8003df2 <osThreadNew+0xca>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d108      	bne.n	8003df2 <osThreadNew+0xca>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d104      	bne.n	8003df2 <osThreadNew+0xca>
          mem = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	e001      	b.n	8003df2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d110      	bne.n	8003e1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e00:	9202      	str	r2, [sp, #8]
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	6a3a      	ldr	r2, [r7, #32]
 8003e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fe0c 	bl	8004a2c <xTaskCreateStatic>
 8003e14:	4603      	mov	r3, r0
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	e013      	b.n	8003e42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d110      	bne.n	8003e42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	f107 0310 	add.w	r3, r7, #16
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 fe57 	bl	8004ae6 <xTaskCreate>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d001      	beq.n	8003e42 <osThreadNew+0x11a>
            hTask = NULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e42:	693b      	ldr	r3, [r7, #16]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3728      	adds	r7, #40	; 0x28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e54:	f3ef 8305 	mrs	r3, IPSR
 8003e58:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <osDelay+0x1c>
    stat = osErrorISR;
 8003e60:	f06f 0305 	mvn.w	r3, #5
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	e007      	b.n	8003e78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 ff92 	bl	8004d9c <vTaskDelay>
    }
  }

  return (stat);
 8003e78:	68fb      	ldr	r3, [r7, #12]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4a07      	ldr	r2, [pc, #28]	; (8003eb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4a06      	ldr	r2, [pc, #24]	; (8003eb4 <vApplicationGetIdleTaskMemory+0x30>)
 8003e9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2240      	movs	r2, #64	; 0x40
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	200000f4 	.word	0x200000f4
 8003eb4:	200001b0 	.word	0x200001b0

08003eb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4a07      	ldr	r2, [pc, #28]	; (8003ee4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ec8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4a06      	ldr	r2, [pc, #24]	; (8003ee8 <vApplicationGetTimerTaskMemory+0x30>)
 8003ece:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2280      	movs	r2, #128	; 0x80
 8003ed4:	601a      	str	r2, [r3, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	200002b0 	.word	0x200002b0
 8003ee8:	2000036c 	.word	0x2000036c

08003eec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f103 0208 	add.w	r2, r3, #8
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f04f 32ff 	mov.w	r2, #4294967295
 8003f04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f103 0208 	add.w	r2, r3, #8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f103 0208 	add.w	r2, r3, #8
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	601a      	str	r2, [r3, #0]
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b085      	sub	sp, #20
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d103      	bne.n	8003fae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	e00c      	b.n	8003fc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e002      	b.n	8003fbc <vListInsert+0x2e>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d2f6      	bcs.n	8003fb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6892      	ldr	r2, [r2, #8]
 8004016:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6852      	ldr	r2, [r2, #4]
 8004020:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	429a      	cmp	r2, r3
 800402a:	d103      	bne.n	8004034 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	1e5a      	subs	r2, r3, #1
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800407e:	f002 f879 	bl	8006174 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	441a      	add	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ae:	3b01      	subs	r3, #1
 80040b0:	68f9      	ldr	r1, [r7, #12]
 80040b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	441a      	add	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	22ff      	movs	r2, #255	; 0xff
 80040c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	22ff      	movs	r2, #255	; 0xff
 80040ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d114      	bne.n	80040fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01a      	beq.n	8004112 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3310      	adds	r3, #16
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 f929 	bl	8005338 <xTaskRemoveFromEventList>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d012      	beq.n	8004112 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <xQueueGenericReset+0xcc>)
 80040ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	e009      	b.n	8004112 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3310      	adds	r3, #16
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fef2 	bl	8003eec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3324      	adds	r3, #36	; 0x24
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff feed 	bl	8003eec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004112:	f002 f85f 	bl	80061d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004116:	2301      	movs	r3, #1
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	e000ed04 	.word	0xe000ed04

08004124 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08e      	sub	sp, #56	; 0x38
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <xQueueGenericCreateStatic+0x52>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <xQueueGenericCreateStatic+0x56>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <xQueueGenericCreateStatic+0x58>
 800417a:	2300      	movs	r3, #0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10a      	bne.n	8004196 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	623b      	str	r3, [r7, #32]
}
 8004192:	bf00      	nop
 8004194:	e7fe      	b.n	8004194 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <xQueueGenericCreateStatic+0x7e>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <xQueueGenericCreateStatic+0x82>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <xQueueGenericCreateStatic+0x84>
 80041a6:	2300      	movs	r3, #0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	61fb      	str	r3, [r7, #28]
}
 80041be:	bf00      	nop
 80041c0:	e7fe      	b.n	80041c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041c2:	2350      	movs	r3, #80	; 0x50
 80041c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b50      	cmp	r3, #80	; 0x50
 80041ca:	d00a      	beq.n	80041e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	61bb      	str	r3, [r7, #24]
}
 80041de:	bf00      	nop
 80041e0:	e7fe      	b.n	80041e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80041e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00d      	beq.n	800420a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f805 	bl	8004214 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800420c:	4618      	mov	r0, r3
 800420e:	3730      	adds	r7, #48	; 0x30
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d103      	bne.n	8004230 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e002      	b.n	8004236 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004242:	2101      	movs	r1, #1
 8004244:	69b8      	ldr	r0, [r7, #24]
 8004246:	f7ff ff05 	bl	8004054 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004252:	bf00      	nop
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08e      	sub	sp, #56	; 0x38
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800426a:	2300      	movs	r3, #0
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <xQueueGenericSend+0x32>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <xQueueGenericSend+0x40>
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <xQueueGenericSend+0x44>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <xQueueGenericSend+0x46>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <xQueueGenericSend+0x60>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d103      	bne.n	80042ca <xQueueGenericSend+0x6e>
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <xQueueGenericSend+0x72>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <xQueueGenericSend+0x74>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <xQueueGenericSend+0x8e>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	623b      	str	r3, [r7, #32]
}
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ea:	f001 f9e7 	bl	80056bc <xTaskGetSchedulerState>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d102      	bne.n	80042fa <xQueueGenericSend+0x9e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <xQueueGenericSend+0xa2>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <xQueueGenericSend+0xa4>
 80042fe:	2300      	movs	r3, #0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xQueueGenericSend+0xbe>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	61fb      	str	r3, [r7, #28]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800431a:	f001 ff2b 	bl	8006174 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	429a      	cmp	r2, r3
 8004328:	d302      	bcc.n	8004330 <xQueueGenericSend+0xd4>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d129      	bne.n	8004384 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004336:	f000 fa0b 	bl	8004750 <prvCopyDataToQueue>
 800433a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	d010      	beq.n	8004366 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	3324      	adds	r3, #36	; 0x24
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fff5 	bl	8005338 <xTaskRemoveFromEventList>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004354:	4b3f      	ldr	r3, [pc, #252]	; (8004454 <xQueueGenericSend+0x1f8>)
 8004356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	e00a      	b.n	800437c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800436c:	4b39      	ldr	r3, [pc, #228]	; (8004454 <xQueueGenericSend+0x1f8>)
 800436e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800437c:	f001 ff2a 	bl	80061d4 <vPortExitCritical>
				return pdPASS;
 8004380:	2301      	movs	r3, #1
 8004382:	e063      	b.n	800444c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800438a:	f001 ff23 	bl	80061d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800438e:	2300      	movs	r3, #0
 8004390:	e05c      	b.n	800444c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004398:	f107 0314 	add.w	r3, r7, #20
 800439c:	4618      	mov	r0, r3
 800439e:	f001 f82f 	bl	8005400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043a6:	f001 ff15 	bl	80061d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043aa:	f000 fd9b 	bl	8004ee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ae:	f001 fee1 	bl	8006174 <vPortEnterCritical>
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043b8:	b25b      	sxtb	r3, r3
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d103      	bne.n	80043c8 <xQueueGenericSend+0x16c>
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ce:	b25b      	sxtb	r3, r3
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d103      	bne.n	80043de <xQueueGenericSend+0x182>
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043de:	f001 fef9 	bl	80061d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043e2:	1d3a      	adds	r2, r7, #4
 80043e4:	f107 0314 	add.w	r3, r7, #20
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f001 f81e 	bl	800542c <xTaskCheckForTimeOut>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d124      	bne.n	8004440 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043f8:	f000 faa2 	bl	8004940 <prvIsQueueFull>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d018      	beq.n	8004434 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	3310      	adds	r3, #16
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4611      	mov	r1, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f000 ff44 	bl	8005298 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004412:	f000 fa2d 	bl	8004870 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004416:	f000 fd73 	bl	8004f00 <xTaskResumeAll>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	f47f af7c 	bne.w	800431a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004422:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <xQueueGenericSend+0x1f8>)
 8004424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	e772      	b.n	800431a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004436:	f000 fa1b 	bl	8004870 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800443a:	f000 fd61 	bl	8004f00 <xTaskResumeAll>
 800443e:	e76c      	b.n	800431a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004442:	f000 fa15 	bl	8004870 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004446:	f000 fd5b 	bl	8004f00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800444a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800444c:	4618      	mov	r0, r3
 800444e:	3738      	adds	r7, #56	; 0x38
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b090      	sub	sp, #64	; 0x40
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <xQueueGenericSendFromISR+0x3c>
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <xQueueGenericSendFromISR+0x40>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <xQueueGenericSendFromISR+0x42>
 8004498:	2300      	movs	r3, #0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d103      	bne.n	80044c2 <xQueueGenericSendFromISR+0x6a>
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <xQueueGenericSendFromISR+0x6e>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <xQueueGenericSendFromISR+0x70>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	623b      	str	r3, [r7, #32]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044e2:	f001 ff29 	bl	8006338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044e6:	f3ef 8211 	mrs	r2, BASEPRI
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	61fa      	str	r2, [r7, #28]
 80044fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004500:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	429a      	cmp	r2, r3
 800450c:	d302      	bcc.n	8004514 <xQueueGenericSendFromISR+0xbc>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d12f      	bne.n	8004574 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800451a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800452a:	f000 f911 	bl	8004750 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800452e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d112      	bne.n	800455e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	d016      	beq.n	800456e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	3324      	adds	r3, #36	; 0x24
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fef7 	bl	8005338 <xTaskRemoveFromEventList>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00e      	beq.n	800456e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e007      	b.n	800456e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800455e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004562:	3301      	adds	r3, #1
 8004564:	b2db      	uxtb	r3, r3
 8004566:	b25a      	sxtb	r2, r3
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800456e:	2301      	movs	r3, #1
 8004570:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004572:	e001      	b.n	8004578 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004574:	2300      	movs	r3, #0
 8004576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004582:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004586:	4618      	mov	r0, r3
 8004588:	3740      	adds	r7, #64	; 0x40
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08c      	sub	sp, #48	; 0x30
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800459c:	2300      	movs	r3, #0
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <xQueueReceive+0x30>
	__asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	623b      	str	r3, [r7, #32]
}
 80045bc:	bf00      	nop
 80045be:	e7fe      	b.n	80045be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <xQueueReceive+0x3e>
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <xQueueReceive+0x42>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <xQueueReceive+0x44>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xQueueReceive+0x5e>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	61fb      	str	r3, [r7, #28]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045ee:	f001 f865 	bl	80056bc <xTaskGetSchedulerState>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <xQueueReceive+0x6e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <xQueueReceive+0x72>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <xQueueReceive+0x74>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <xQueueReceive+0x8e>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	61bb      	str	r3, [r7, #24]
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800461e:	f001 fda9 	bl	8006174 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01f      	beq.n	800466e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004632:	f000 f8f7 	bl	8004824 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	1e5a      	subs	r2, r3, #1
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00f      	beq.n	8004666 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	3310      	adds	r3, #16
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fe74 	bl	8005338 <xTaskRemoveFromEventList>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004656:	4b3d      	ldr	r3, [pc, #244]	; (800474c <xQueueReceive+0x1bc>)
 8004658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004666:	f001 fdb5 	bl	80061d4 <vPortExitCritical>
				return pdPASS;
 800466a:	2301      	movs	r3, #1
 800466c:	e069      	b.n	8004742 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d103      	bne.n	800467c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004674:	f001 fdae 	bl	80061d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004678:	2300      	movs	r3, #0
 800467a:	e062      	b.n	8004742 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800467c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004682:	f107 0310 	add.w	r3, r7, #16
 8004686:	4618      	mov	r0, r3
 8004688:	f000 feba 	bl	8005400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800468c:	2301      	movs	r3, #1
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004690:	f001 fda0 	bl	80061d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004694:	f000 fc26 	bl	8004ee4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004698:	f001 fd6c 	bl	8006174 <vPortEnterCritical>
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046a2:	b25b      	sxtb	r3, r3
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d103      	bne.n	80046b2 <xQueueReceive+0x122>
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046b8:	b25b      	sxtb	r3, r3
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d103      	bne.n	80046c8 <xQueueReceive+0x138>
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046c8:	f001 fd84 	bl	80061d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046cc:	1d3a      	adds	r2, r7, #4
 80046ce:	f107 0310 	add.w	r3, r7, #16
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fea9 	bl	800542c <xTaskCheckForTimeOut>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d123      	bne.n	8004728 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e2:	f000 f917 	bl	8004914 <prvIsQueueEmpty>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d017      	beq.n	800471c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	3324      	adds	r3, #36	; 0x24
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	4611      	mov	r1, r2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fdcf 	bl	8005298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046fc:	f000 f8b8 	bl	8004870 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004700:	f000 fbfe 	bl	8004f00 <xTaskResumeAll>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d189      	bne.n	800461e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800470a:	4b10      	ldr	r3, [pc, #64]	; (800474c <xQueueReceive+0x1bc>)
 800470c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	e780      	b.n	800461e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800471c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800471e:	f000 f8a7 	bl	8004870 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004722:	f000 fbed 	bl	8004f00 <xTaskResumeAll>
 8004726:	e77a      	b.n	800461e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800472a:	f000 f8a1 	bl	8004870 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800472e:	f000 fbe7 	bl	8004f00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004734:	f000 f8ee 	bl	8004914 <prvIsQueueEmpty>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	f43f af6f 	beq.w	800461e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004740:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004742:	4618      	mov	r0, r3
 8004744:	3730      	adds	r7, #48	; 0x30
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10d      	bne.n	800478a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d14d      	bne.n	8004812 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 ffbc 	bl	80056f8 <xTaskPriorityDisinherit>
 8004780:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	e043      	b.n	8004812 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d119      	bne.n	80047c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6858      	ldr	r0, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	461a      	mov	r2, r3
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	f002 f836 	bl	800680c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	441a      	add	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d32b      	bcc.n	8004812 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	e026      	b.n	8004812 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68d8      	ldr	r0, [r3, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	461a      	mov	r2, r3
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	f002 f81c 	bl	800680c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	425b      	negs	r3, r3
 80047de:	441a      	add	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d207      	bcs.n	8004800 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	425b      	negs	r3, r3
 80047fa:	441a      	add	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d105      	bne.n	8004812 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	3b01      	subs	r3, #1
 8004810:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800481a:	697b      	ldr	r3, [r7, #20]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d018      	beq.n	8004868 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	441a      	add	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	429a      	cmp	r2, r3
 800484e:	d303      	bcc.n	8004858 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68d9      	ldr	r1, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	461a      	mov	r2, r3
 8004862:	6838      	ldr	r0, [r7, #0]
 8004864:	f001 ffd2 	bl	800680c <memcpy>
	}
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004878:	f001 fc7c 	bl	8006174 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004882:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004884:	e011      	b.n	80048aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d012      	beq.n	80048b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3324      	adds	r3, #36	; 0x24
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fd50 	bl	8005338 <xTaskRemoveFromEventList>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800489e:	f000 fe27 	bl	80054f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dce9      	bgt.n	8004886 <prvUnlockQueue+0x16>
 80048b2:	e000      	b.n	80048b6 <prvUnlockQueue+0x46>
					break;
 80048b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	22ff      	movs	r2, #255	; 0xff
 80048ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048be:	f001 fc89 	bl	80061d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048c2:	f001 fc57 	bl	8006174 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048ce:	e011      	b.n	80048f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d012      	beq.n	80048fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3310      	adds	r3, #16
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fd2b 	bl	8005338 <xTaskRemoveFromEventList>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048e8:	f000 fe02 	bl	80054f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048ec:	7bbb      	ldrb	r3, [r7, #14]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	dce9      	bgt.n	80048d0 <prvUnlockQueue+0x60>
 80048fc:	e000      	b.n	8004900 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	22ff      	movs	r2, #255	; 0xff
 8004904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004908:	f001 fc64 	bl	80061d4 <vPortExitCritical>
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800491c:	f001 fc2a 	bl	8006174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	2b00      	cmp	r3, #0
 8004926:	d102      	bne.n	800492e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004928:	2301      	movs	r3, #1
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	e001      	b.n	8004932 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004932:	f001 fc4f 	bl	80061d4 <vPortExitCritical>

	return xReturn;
 8004936:	68fb      	ldr	r3, [r7, #12]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004948:	f001 fc14 	bl	8006174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	429a      	cmp	r2, r3
 8004956:	d102      	bne.n	800495e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e001      	b.n	8004962 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004962:	f001 fc37 	bl	80061d4 <vPortExitCritical>

	return xReturn;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e014      	b.n	80049aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004980:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <vQueueAddToRegistry+0x50>)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10b      	bne.n	80049a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800498c:	490c      	ldr	r1, [pc, #48]	; (80049c0 <vQueueAddToRegistry+0x50>)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004996:	4a0a      	ldr	r2, [pc, #40]	; (80049c0 <vQueueAddToRegistry+0x50>)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4413      	add	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049a2:	e006      	b.n	80049b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3301      	adds	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b07      	cmp	r3, #7
 80049ae:	d9e7      	bls.n	8004980 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	2000488c 	.word	0x2000488c

080049c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049d4:	f001 fbce 	bl	8006174 <vPortEnterCritical>
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049de:	b25b      	sxtb	r3, r3
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d103      	bne.n	80049ee <vQueueWaitForMessageRestricted+0x2a>
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f4:	b25b      	sxtb	r3, r3
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	d103      	bne.n	8004a04 <vQueueWaitForMessageRestricted+0x40>
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a04:	f001 fbe6 	bl	80061d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	3324      	adds	r3, #36	; 0x24
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fc61 	bl	80052e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a1e:	6978      	ldr	r0, [r7, #20]
 8004a20:	f7ff ff26 	bl	8004870 <prvUnlockQueue>
	}
 8004a24:	bf00      	nop
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08e      	sub	sp, #56	; 0x38
 8004a30:	af04      	add	r7, sp, #16
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	623b      	str	r3, [r7, #32]
}
 8004a52:	bf00      	nop
 8004a54:	e7fe      	b.n	8004a54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xTaskCreateStatic+0x46>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	61fb      	str	r3, [r7, #28]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a72:	23bc      	movs	r3, #188	; 0xbc
 8004a74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2bbc      	cmp	r3, #188	; 0xbc
 8004a7a:	d00a      	beq.n	8004a92 <xTaskCreateStatic+0x66>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	61bb      	str	r3, [r7, #24]
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01e      	beq.n	8004ad8 <xTaskCreateStatic+0xac>
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01b      	beq.n	8004ad8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	2202      	movs	r2, #2
 8004aae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	9303      	str	r3, [sp, #12]
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	9302      	str	r3, [sp, #8]
 8004aba:	f107 0314 	add.w	r3, r7, #20
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f850 	bl	8004b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ad2:	f000 f8f3 	bl	8004cbc <prvAddNewTaskToReadyList>
 8004ad6:	e001      	b.n	8004adc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004adc:	697b      	ldr	r3, [r7, #20]
	}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3728      	adds	r7, #40	; 0x28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b08c      	sub	sp, #48	; 0x30
 8004aea:	af04      	add	r7, sp, #16
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004af6:	88fb      	ldrh	r3, [r7, #6]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 fc5c 	bl	80063b8 <pvPortMalloc>
 8004b00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00e      	beq.n	8004b26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b08:	20bc      	movs	r0, #188	; 0xbc
 8004b0a:	f001 fc55 	bl	80063b8 <pvPortMalloc>
 8004b0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8004b1c:	e005      	b.n	8004b2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b1e:	6978      	ldr	r0, [r7, #20]
 8004b20:	f001 fd16 	bl	8006550 <vPortFree>
 8004b24:	e001      	b.n	8004b2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d017      	beq.n	8004b60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b38:	88fa      	ldrh	r2, [r7, #6]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9303      	str	r3, [sp, #12]
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	9302      	str	r3, [sp, #8]
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	9301      	str	r3, [sp, #4]
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f80e 	bl	8004b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b54:	69f8      	ldr	r0, [r7, #28]
 8004b56:	f000 f8b1 	bl	8004cbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	e002      	b.n	8004b66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b60:	f04f 33ff 	mov.w	r3, #4294967295
 8004b64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b66:	69bb      	ldr	r3, [r7, #24]
	}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	461a      	mov	r2, r3
 8004b88:	21a5      	movs	r1, #165	; 0xa5
 8004b8a:	f001 fe4d 	bl	8006828 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f023 0307 	bic.w	r3, r3, #7
 8004ba6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	617b      	str	r3, [r7, #20]
}
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01f      	beq.n	8004c0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
 8004bd2:	e012      	b.n	8004bfa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	4413      	add	r3, r2
 8004bda:	7819      	ldrb	r1, [r3, #0]
 8004bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	3334      	adds	r3, #52	; 0x34
 8004be4:	460a      	mov	r2, r1
 8004be6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d006      	beq.n	8004c02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	2b0f      	cmp	r3, #15
 8004bfe:	d9e9      	bls.n	8004bd4 <prvInitialiseNewTask+0x64>
 8004c00:	e000      	b.n	8004c04 <prvInitialiseNewTask+0x94>
			{
				break;
 8004c02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c0c:	e003      	b.n	8004c16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	2b37      	cmp	r3, #55	; 0x37
 8004c1a:	d901      	bls.n	8004c20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c1c:	2337      	movs	r3, #55	; 0x37
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	2200      	movs	r2, #0
 8004c30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	3304      	adds	r3, #4
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff f978 	bl	8003f2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	3318      	adds	r3, #24
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff f973 	bl	8003f2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6e:	3354      	adds	r3, #84	; 0x54
 8004c70:	2260      	movs	r2, #96	; 0x60
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 fdd7 	bl	8006828 <memset>
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	4a0c      	ldr	r2, [pc, #48]	; (8004cb0 <prvInitialiseNewTask+0x140>)
 8004c7e:	659a      	str	r2, [r3, #88]	; 0x58
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	4a0c      	ldr	r2, [pc, #48]	; (8004cb4 <prvInitialiseNewTask+0x144>)
 8004c84:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <prvInitialiseNewTask+0x148>)
 8004c8a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	68f9      	ldr	r1, [r7, #12]
 8004c90:	69b8      	ldr	r0, [r7, #24]
 8004c92:	f001 f941 	bl	8005f18 <pxPortInitialiseStack>
 8004c96:	4602      	mov	r2, r0
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ca6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ca8:	bf00      	nop
 8004caa:	3720      	adds	r7, #32
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	08006b68 	.word	0x08006b68
 8004cb4:	08006b88 	.word	0x08006b88
 8004cb8:	08006b48 	.word	0x08006b48

08004cbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004cc4:	f001 fa56 	bl	8006174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004cc8:	4b2d      	ldr	r3, [pc, #180]	; (8004d80 <prvAddNewTaskToReadyList+0xc4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	4a2c      	ldr	r2, [pc, #176]	; (8004d80 <prvAddNewTaskToReadyList+0xc4>)
 8004cd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004cd2:	4b2c      	ldr	r3, [pc, #176]	; (8004d84 <prvAddNewTaskToReadyList+0xc8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004cda:	4a2a      	ldr	r2, [pc, #168]	; (8004d84 <prvAddNewTaskToReadyList+0xc8>)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ce0:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <prvAddNewTaskToReadyList+0xc4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d110      	bne.n	8004d0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ce8:	f000 fc26 	bl	8005538 <prvInitialiseTaskLists>
 8004cec:	e00d      	b.n	8004d0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cee:	4b26      	ldr	r3, [pc, #152]	; (8004d88 <prvAddNewTaskToReadyList+0xcc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cf6:	4b23      	ldr	r3, [pc, #140]	; (8004d84 <prvAddNewTaskToReadyList+0xc8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d802      	bhi.n	8004d0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d04:	4a1f      	ldr	r2, [pc, #124]	; (8004d84 <prvAddNewTaskToReadyList+0xc8>)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d0a:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <prvAddNewTaskToReadyList+0xd0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	4a1e      	ldr	r2, [pc, #120]	; (8004d8c <prvAddNewTaskToReadyList+0xd0>)
 8004d12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d14:	4b1d      	ldr	r3, [pc, #116]	; (8004d8c <prvAddNewTaskToReadyList+0xd0>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d20:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <prvAddNewTaskToReadyList+0xd4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d903      	bls.n	8004d30 <prvAddNewTaskToReadyList+0x74>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	4a18      	ldr	r2, [pc, #96]	; (8004d90 <prvAddNewTaskToReadyList+0xd4>)
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4a15      	ldr	r2, [pc, #84]	; (8004d94 <prvAddNewTaskToReadyList+0xd8>)
 8004d3e:	441a      	add	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f7ff f8fd 	bl	8003f46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d4c:	f001 fa42 	bl	80061d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d50:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <prvAddNewTaskToReadyList+0xcc>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00e      	beq.n	8004d76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <prvAddNewTaskToReadyList+0xc8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d207      	bcs.n	8004d76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <prvAddNewTaskToReadyList+0xdc>)
 8004d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000a40 	.word	0x20000a40
 8004d84:	2000056c 	.word	0x2000056c
 8004d88:	20000a4c 	.word	0x20000a4c
 8004d8c:	20000a5c 	.word	0x20000a5c
 8004d90:	20000a48 	.word	0x20000a48
 8004d94:	20000570 	.word	0x20000570
 8004d98:	e000ed04 	.word	0xe000ed04

08004d9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d017      	beq.n	8004dde <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004dae:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <vTaskDelay+0x60>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <vTaskDelay+0x30>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	60bb      	str	r3, [r7, #8]
}
 8004dc8:	bf00      	nop
 8004dca:	e7fe      	b.n	8004dca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004dcc:	f000 f88a 	bl	8004ee4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fcfe 	bl	80057d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004dd8:	f000 f892 	bl	8004f00 <xTaskResumeAll>
 8004ddc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d107      	bne.n	8004df4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004de4:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <vTaskDelay+0x64>)
 8004de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004df4:	bf00      	nop
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	20000a68 	.word	0x20000a68
 8004e00:	e000ed04 	.word	0xe000ed04

08004e04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e12:	463a      	mov	r2, r7
 8004e14:	1d39      	adds	r1, r7, #4
 8004e16:	f107 0308 	add.w	r3, r7, #8
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff f832 	bl	8003e84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e20:	6839      	ldr	r1, [r7, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	9202      	str	r2, [sp, #8]
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	460a      	mov	r2, r1
 8004e32:	4924      	ldr	r1, [pc, #144]	; (8004ec4 <vTaskStartScheduler+0xc0>)
 8004e34:	4824      	ldr	r0, [pc, #144]	; (8004ec8 <vTaskStartScheduler+0xc4>)
 8004e36:	f7ff fdf9 	bl	8004a2c <xTaskCreateStatic>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4a23      	ldr	r2, [pc, #140]	; (8004ecc <vTaskStartScheduler+0xc8>)
 8004e3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e40:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <vTaskStartScheduler+0xc8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	617b      	str	r3, [r7, #20]
 8004e4c:	e001      	b.n	8004e52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d102      	bne.n	8004e5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e58:	f000 fd10 	bl	800587c <xTimerCreateTimerTask>
 8004e5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d11b      	bne.n	8004e9c <vTaskStartScheduler+0x98>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	613b      	str	r3, [r7, #16]
}
 8004e76:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e78:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <vTaskStartScheduler+0xcc>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3354      	adds	r3, #84	; 0x54
 8004e7e:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <vTaskStartScheduler+0xd0>)
 8004e80:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e82:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <vTaskStartScheduler+0xd4>)
 8004e84:	f04f 32ff 	mov.w	r2, #4294967295
 8004e88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e8a:	4b14      	ldr	r3, [pc, #80]	; (8004edc <vTaskStartScheduler+0xd8>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e90:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <vTaskStartScheduler+0xdc>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e96:	f001 f8cb 	bl	8006030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e9a:	e00e      	b.n	8004eba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea2:	d10a      	bne.n	8004eba <vTaskStartScheduler+0xb6>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	60fb      	str	r3, [r7, #12]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <vTaskStartScheduler+0xb4>
}
 8004eba:	bf00      	nop
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	08006aa4 	.word	0x08006aa4
 8004ec8:	08005509 	.word	0x08005509
 8004ecc:	20000a64 	.word	0x20000a64
 8004ed0:	2000056c 	.word	0x2000056c
 8004ed4:	20000018 	.word	0x20000018
 8004ed8:	20000a60 	.word	0x20000a60
 8004edc:	20000a4c 	.word	0x20000a4c
 8004ee0:	20000a44 	.word	0x20000a44

08004ee4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ee8:	4b04      	ldr	r3, [pc, #16]	; (8004efc <vTaskSuspendAll+0x18>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3301      	adds	r3, #1
 8004eee:	4a03      	ldr	r2, [pc, #12]	; (8004efc <vTaskSuspendAll+0x18>)
 8004ef0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ef2:	bf00      	nop
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	20000a68 	.word	0x20000a68

08004f00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f0e:	4b42      	ldr	r3, [pc, #264]	; (8005018 <xTaskResumeAll+0x118>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10a      	bne.n	8004f2c <xTaskResumeAll+0x2c>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	603b      	str	r3, [r7, #0]
}
 8004f28:	bf00      	nop
 8004f2a:	e7fe      	b.n	8004f2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f2c:	f001 f922 	bl	8006174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f30:	4b39      	ldr	r3, [pc, #228]	; (8005018 <xTaskResumeAll+0x118>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	4a38      	ldr	r2, [pc, #224]	; (8005018 <xTaskResumeAll+0x118>)
 8004f38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f3a:	4b37      	ldr	r3, [pc, #220]	; (8005018 <xTaskResumeAll+0x118>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d162      	bne.n	8005008 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f42:	4b36      	ldr	r3, [pc, #216]	; (800501c <xTaskResumeAll+0x11c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d05e      	beq.n	8005008 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f4a:	e02f      	b.n	8004fac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f4c:	4b34      	ldr	r3, [pc, #208]	; (8005020 <xTaskResumeAll+0x120>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3318      	adds	r3, #24
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff f851 	bl	8004000 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3304      	adds	r3, #4
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff f84c 	bl	8004000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	4b2d      	ldr	r3, [pc, #180]	; (8005024 <xTaskResumeAll+0x124>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d903      	bls.n	8004f7c <xTaskResumeAll+0x7c>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	4a2a      	ldr	r2, [pc, #168]	; (8005024 <xTaskResumeAll+0x124>)
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f80:	4613      	mov	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4a27      	ldr	r2, [pc, #156]	; (8005028 <xTaskResumeAll+0x128>)
 8004f8a:	441a      	add	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4619      	mov	r1, r3
 8004f92:	4610      	mov	r0, r2
 8004f94:	f7fe ffd7 	bl	8003f46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f9c:	4b23      	ldr	r3, [pc, #140]	; (800502c <xTaskResumeAll+0x12c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004fa6:	4b22      	ldr	r3, [pc, #136]	; (8005030 <xTaskResumeAll+0x130>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fac:	4b1c      	ldr	r3, [pc, #112]	; (8005020 <xTaskResumeAll+0x120>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1cb      	bne.n	8004f4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004fba:	f000 fb5f 	bl	800567c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004fbe:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <xTaskResumeAll+0x134>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004fca:	f000 f847 	bl	800505c <xTaskIncrementTick>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004fd4:	4b16      	ldr	r3, [pc, #88]	; (8005030 <xTaskResumeAll+0x130>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f1      	bne.n	8004fca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <xTaskResumeAll+0x134>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <xTaskResumeAll+0x130>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d009      	beq.n	8005008 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <xTaskResumeAll+0x138>)
 8004ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005008:	f001 f8e4 	bl	80061d4 <vPortExitCritical>

	return xAlreadyYielded;
 800500c:	68bb      	ldr	r3, [r7, #8]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000a68 	.word	0x20000a68
 800501c:	20000a40 	.word	0x20000a40
 8005020:	20000a00 	.word	0x20000a00
 8005024:	20000a48 	.word	0x20000a48
 8005028:	20000570 	.word	0x20000570
 800502c:	2000056c 	.word	0x2000056c
 8005030:	20000a54 	.word	0x20000a54
 8005034:	20000a50 	.word	0x20000a50
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005042:	4b05      	ldr	r3, [pc, #20]	; (8005058 <xTaskGetTickCount+0x1c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005048:	687b      	ldr	r3, [r7, #4]
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	20000a44 	.word	0x20000a44

0800505c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005066:	4b4f      	ldr	r3, [pc, #316]	; (80051a4 <xTaskIncrementTick+0x148>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	f040 808f 	bne.w	800518e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005070:	4b4d      	ldr	r3, [pc, #308]	; (80051a8 <xTaskIncrementTick+0x14c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3301      	adds	r3, #1
 8005076:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005078:	4a4b      	ldr	r2, [pc, #300]	; (80051a8 <xTaskIncrementTick+0x14c>)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d120      	bne.n	80050c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005084:	4b49      	ldr	r3, [pc, #292]	; (80051ac <xTaskIncrementTick+0x150>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	603b      	str	r3, [r7, #0]
}
 80050a0:	bf00      	nop
 80050a2:	e7fe      	b.n	80050a2 <xTaskIncrementTick+0x46>
 80050a4:	4b41      	ldr	r3, [pc, #260]	; (80051ac <xTaskIncrementTick+0x150>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <xTaskIncrementTick+0x154>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a3f      	ldr	r2, [pc, #252]	; (80051ac <xTaskIncrementTick+0x150>)
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	4a3f      	ldr	r2, [pc, #252]	; (80051b0 <xTaskIncrementTick+0x154>)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	4b3e      	ldr	r3, [pc, #248]	; (80051b4 <xTaskIncrementTick+0x158>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	4a3d      	ldr	r2, [pc, #244]	; (80051b4 <xTaskIncrementTick+0x158>)
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	f000 fadb 	bl	800567c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050c6:	4b3c      	ldr	r3, [pc, #240]	; (80051b8 <xTaskIncrementTick+0x15c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d349      	bcc.n	8005164 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050d0:	4b36      	ldr	r3, [pc, #216]	; (80051ac <xTaskIncrementTick+0x150>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d104      	bne.n	80050e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050da:	4b37      	ldr	r3, [pc, #220]	; (80051b8 <xTaskIncrementTick+0x15c>)
 80050dc:	f04f 32ff 	mov.w	r2, #4294967295
 80050e0:	601a      	str	r2, [r3, #0]
					break;
 80050e2:	e03f      	b.n	8005164 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e4:	4b31      	ldr	r3, [pc, #196]	; (80051ac <xTaskIncrementTick+0x150>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d203      	bcs.n	8005104 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050fc:	4a2e      	ldr	r2, [pc, #184]	; (80051b8 <xTaskIncrementTick+0x15c>)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005102:	e02f      	b.n	8005164 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	3304      	adds	r3, #4
 8005108:	4618      	mov	r0, r3
 800510a:	f7fe ff79 	bl	8004000 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	3318      	adds	r3, #24
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe ff70 	bl	8004000 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005124:	4b25      	ldr	r3, [pc, #148]	; (80051bc <xTaskIncrementTick+0x160>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d903      	bls.n	8005134 <xTaskIncrementTick+0xd8>
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	4a22      	ldr	r2, [pc, #136]	; (80051bc <xTaskIncrementTick+0x160>)
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <xTaskIncrementTick+0x164>)
 8005142:	441a      	add	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	3304      	adds	r3, #4
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f7fe fefb 	bl	8003f46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005154:	4b1b      	ldr	r3, [pc, #108]	; (80051c4 <xTaskIncrementTick+0x168>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	429a      	cmp	r2, r3
 800515c:	d3b8      	bcc.n	80050d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800515e:	2301      	movs	r3, #1
 8005160:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005162:	e7b5      	b.n	80050d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005164:	4b17      	ldr	r3, [pc, #92]	; (80051c4 <xTaskIncrementTick+0x168>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516a:	4915      	ldr	r1, [pc, #84]	; (80051c0 <xTaskIncrementTick+0x164>)
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d901      	bls.n	8005180 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800517c:	2301      	movs	r3, #1
 800517e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005180:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <xTaskIncrementTick+0x16c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005188:	2301      	movs	r3, #1
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	e004      	b.n	8005198 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800518e:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <xTaskIncrementTick+0x170>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3301      	adds	r3, #1
 8005194:	4a0d      	ldr	r2, [pc, #52]	; (80051cc <xTaskIncrementTick+0x170>)
 8005196:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005198:	697b      	ldr	r3, [r7, #20]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000a68 	.word	0x20000a68
 80051a8:	20000a44 	.word	0x20000a44
 80051ac:	200009f8 	.word	0x200009f8
 80051b0:	200009fc 	.word	0x200009fc
 80051b4:	20000a58 	.word	0x20000a58
 80051b8:	20000a60 	.word	0x20000a60
 80051bc:	20000a48 	.word	0x20000a48
 80051c0:	20000570 	.word	0x20000570
 80051c4:	2000056c 	.word	0x2000056c
 80051c8:	20000a54 	.word	0x20000a54
 80051cc:	20000a50 	.word	0x20000a50

080051d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051d6:	4b2a      	ldr	r3, [pc, #168]	; (8005280 <vTaskSwitchContext+0xb0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80051de:	4b29      	ldr	r3, [pc, #164]	; (8005284 <vTaskSwitchContext+0xb4>)
 80051e0:	2201      	movs	r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051e4:	e046      	b.n	8005274 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80051e6:	4b27      	ldr	r3, [pc, #156]	; (8005284 <vTaskSwitchContext+0xb4>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ec:	4b26      	ldr	r3, [pc, #152]	; (8005288 <vTaskSwitchContext+0xb8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e010      	b.n	8005216 <vTaskSwitchContext+0x46>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <vTaskSwitchContext+0x40>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	607b      	str	r3, [r7, #4]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <vTaskSwitchContext+0x3e>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3b01      	subs	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	491d      	ldr	r1, [pc, #116]	; (800528c <vTaskSwitchContext+0xbc>)
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0e4      	beq.n	80051f4 <vTaskSwitchContext+0x24>
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4a15      	ldr	r2, [pc, #84]	; (800528c <vTaskSwitchContext+0xbc>)
 8005236:	4413      	add	r3, r2
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	605a      	str	r2, [r3, #4]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	3308      	adds	r3, #8
 800524c:	429a      	cmp	r2, r3
 800524e:	d104      	bne.n	800525a <vTaskSwitchContext+0x8a>
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	605a      	str	r2, [r3, #4]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4a0b      	ldr	r2, [pc, #44]	; (8005290 <vTaskSwitchContext+0xc0>)
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	4a08      	ldr	r2, [pc, #32]	; (8005288 <vTaskSwitchContext+0xb8>)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800526a:	4b09      	ldr	r3, [pc, #36]	; (8005290 <vTaskSwitchContext+0xc0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3354      	adds	r3, #84	; 0x54
 8005270:	4a08      	ldr	r2, [pc, #32]	; (8005294 <vTaskSwitchContext+0xc4>)
 8005272:	6013      	str	r3, [r2, #0]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	20000a68 	.word	0x20000a68
 8005284:	20000a54 	.word	0x20000a54
 8005288:	20000a48 	.word	0x20000a48
 800528c:	20000570 	.word	0x20000570
 8005290:	2000056c 	.word	0x2000056c
 8005294:	20000018 	.word	0x20000018

08005298 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	60fb      	str	r3, [r7, #12]
}
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <vTaskPlaceOnEventList+0x44>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3318      	adds	r3, #24
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fe fe61 	bl	8003f8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052cc:	2101      	movs	r1, #1
 80052ce:	6838      	ldr	r0, [r7, #0]
 80052d0:	f000 fa80 	bl	80057d4 <prvAddCurrentTaskToDelayedList>
}
 80052d4:	bf00      	nop
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	2000056c 	.word	0x2000056c

080052e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	617b      	str	r3, [r7, #20]
}
 8005304:	bf00      	nop
 8005306:	e7fe      	b.n	8005306 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <vTaskPlaceOnEventListRestricted+0x54>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3318      	adds	r3, #24
 800530e:	4619      	mov	r1, r3
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7fe fe18 	bl	8003f46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800531c:	f04f 33ff 	mov.w	r3, #4294967295
 8005320:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	68b8      	ldr	r0, [r7, #8]
 8005326:	f000 fa55 	bl	80057d4 <prvAddCurrentTaskToDelayedList>
	}
 800532a:	bf00      	nop
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	2000056c 	.word	0x2000056c

08005338 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	3318      	adds	r3, #24
 8005368:	4618      	mov	r0, r3
 800536a:	f7fe fe49 	bl	8004000 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800536e:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <xTaskRemoveFromEventList+0xb0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d11d      	bne.n	80053b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	3304      	adds	r3, #4
 800537a:	4618      	mov	r0, r3
 800537c:	f7fe fe40 	bl	8004000 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	4b19      	ldr	r3, [pc, #100]	; (80053ec <xTaskRemoveFromEventList+0xb4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d903      	bls.n	8005394 <xTaskRemoveFromEventList+0x5c>
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	4a16      	ldr	r2, [pc, #88]	; (80053ec <xTaskRemoveFromEventList+0xb4>)
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <xTaskRemoveFromEventList+0xb8>)
 80053a2:	441a      	add	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f7fe fdcb 	bl	8003f46 <vListInsertEnd>
 80053b0:	e005      	b.n	80053be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	3318      	adds	r3, #24
 80053b6:	4619      	mov	r1, r3
 80053b8:	480e      	ldr	r0, [pc, #56]	; (80053f4 <xTaskRemoveFromEventList+0xbc>)
 80053ba:	f7fe fdc4 	bl	8003f46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c2:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <xTaskRemoveFromEventList+0xc0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d905      	bls.n	80053d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80053d0:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <xTaskRemoveFromEventList+0xc4>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e001      	b.n	80053dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80053dc:	697b      	ldr	r3, [r7, #20]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000a68 	.word	0x20000a68
 80053ec:	20000a48 	.word	0x20000a48
 80053f0:	20000570 	.word	0x20000570
 80053f4:	20000a00 	.word	0x20000a00
 80053f8:	2000056c 	.word	0x2000056c
 80053fc:	20000a54 	.word	0x20000a54

08005400 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005408:	4b06      	ldr	r3, [pc, #24]	; (8005424 <vTaskInternalSetTimeOutState+0x24>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <vTaskInternalSetTimeOutState+0x28>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	605a      	str	r2, [r3, #4]
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	20000a58 	.word	0x20000a58
 8005428:	20000a44 	.word	0x20000a44

0800542c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	613b      	str	r3, [r7, #16]
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	60fb      	str	r3, [r7, #12]
}
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800546e:	f000 fe81 	bl	8006174 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005472:	4b1d      	ldr	r3, [pc, #116]	; (80054e8 <xTaskCheckForTimeOut+0xbc>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548a:	d102      	bne.n	8005492 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800548c:	2300      	movs	r3, #0
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	e023      	b.n	80054da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <xTaskCheckForTimeOut+0xc0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d007      	beq.n	80054ae <xTaskCheckForTimeOut+0x82>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d302      	bcc.n	80054ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054a8:	2301      	movs	r3, #1
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	e015      	b.n	80054da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d20b      	bcs.n	80054d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	1ad2      	subs	r2, r2, r3
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7ff ff9b 	bl	8005400 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	e004      	b.n	80054da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80054d6:	2301      	movs	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80054da:	f000 fe7b 	bl	80061d4 <vPortExitCritical>

	return xReturn;
 80054de:	69fb      	ldr	r3, [r7, #28]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20000a44 	.word	0x20000a44
 80054ec:	20000a58 	.word	0x20000a58

080054f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054f4:	4b03      	ldr	r3, [pc, #12]	; (8005504 <vTaskMissedYield+0x14>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
}
 80054fa:	bf00      	nop
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	20000a54 	.word	0x20000a54

08005508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005510:	f000 f852 	bl	80055b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005514:	4b06      	ldr	r3, [pc, #24]	; (8005530 <prvIdleTask+0x28>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d9f9      	bls.n	8005510 <prvIdleTask+0x8>
			{
				taskYIELD();
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <prvIdleTask+0x2c>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800552c:	e7f0      	b.n	8005510 <prvIdleTask+0x8>
 800552e:	bf00      	nop
 8005530:	20000570 	.word	0x20000570
 8005534:	e000ed04 	.word	0xe000ed04

08005538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800553e:	2300      	movs	r3, #0
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	e00c      	b.n	800555e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4a12      	ldr	r2, [pc, #72]	; (8005598 <prvInitialiseTaskLists+0x60>)
 8005550:	4413      	add	r3, r2
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe fcca 	bl	8003eec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3301      	adds	r3, #1
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b37      	cmp	r3, #55	; 0x37
 8005562:	d9ef      	bls.n	8005544 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005564:	480d      	ldr	r0, [pc, #52]	; (800559c <prvInitialiseTaskLists+0x64>)
 8005566:	f7fe fcc1 	bl	8003eec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800556a:	480d      	ldr	r0, [pc, #52]	; (80055a0 <prvInitialiseTaskLists+0x68>)
 800556c:	f7fe fcbe 	bl	8003eec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005570:	480c      	ldr	r0, [pc, #48]	; (80055a4 <prvInitialiseTaskLists+0x6c>)
 8005572:	f7fe fcbb 	bl	8003eec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005576:	480c      	ldr	r0, [pc, #48]	; (80055a8 <prvInitialiseTaskLists+0x70>)
 8005578:	f7fe fcb8 	bl	8003eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800557c:	480b      	ldr	r0, [pc, #44]	; (80055ac <prvInitialiseTaskLists+0x74>)
 800557e:	f7fe fcb5 	bl	8003eec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005582:	4b0b      	ldr	r3, [pc, #44]	; (80055b0 <prvInitialiseTaskLists+0x78>)
 8005584:	4a05      	ldr	r2, [pc, #20]	; (800559c <prvInitialiseTaskLists+0x64>)
 8005586:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005588:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <prvInitialiseTaskLists+0x7c>)
 800558a:	4a05      	ldr	r2, [pc, #20]	; (80055a0 <prvInitialiseTaskLists+0x68>)
 800558c:	601a      	str	r2, [r3, #0]
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000570 	.word	0x20000570
 800559c:	200009d0 	.word	0x200009d0
 80055a0:	200009e4 	.word	0x200009e4
 80055a4:	20000a00 	.word	0x20000a00
 80055a8:	20000a14 	.word	0x20000a14
 80055ac:	20000a2c 	.word	0x20000a2c
 80055b0:	200009f8 	.word	0x200009f8
 80055b4:	200009fc 	.word	0x200009fc

080055b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055be:	e019      	b.n	80055f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055c0:	f000 fdd8 	bl	8006174 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c4:	4b10      	ldr	r3, [pc, #64]	; (8005608 <prvCheckTasksWaitingTermination+0x50>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fe fd15 	bl	8004000 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80055d6:	4b0d      	ldr	r3, [pc, #52]	; (800560c <prvCheckTasksWaitingTermination+0x54>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3b01      	subs	r3, #1
 80055dc:	4a0b      	ldr	r2, [pc, #44]	; (800560c <prvCheckTasksWaitingTermination+0x54>)
 80055de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <prvCheckTasksWaitingTermination+0x58>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	4a0a      	ldr	r2, [pc, #40]	; (8005610 <prvCheckTasksWaitingTermination+0x58>)
 80055e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80055ea:	f000 fdf3 	bl	80061d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f810 	bl	8005614 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <prvCheckTasksWaitingTermination+0x58>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e1      	bne.n	80055c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000a14 	.word	0x20000a14
 800560c:	20000a40 	.word	0x20000a40
 8005610:	20000a28 	.word	0x20000a28

08005614 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3354      	adds	r3, #84	; 0x54
 8005620:	4618      	mov	r0, r3
 8005622:	f001 f917 	bl	8006854 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800562c:	2b00      	cmp	r3, #0
 800562e:	d108      	bne.n	8005642 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	4618      	mov	r0, r3
 8005636:	f000 ff8b 	bl	8006550 <vPortFree>
				vPortFree( pxTCB );
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 ff88 	bl	8006550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005640:	e018      	b.n	8005674 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005648:	2b01      	cmp	r3, #1
 800564a:	d103      	bne.n	8005654 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 ff7f 	bl	8006550 <vPortFree>
	}
 8005652:	e00f      	b.n	8005674 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800565a:	2b02      	cmp	r3, #2
 800565c:	d00a      	beq.n	8005674 <prvDeleteTCB+0x60>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	60fb      	str	r3, [r7, #12]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <prvDeleteTCB+0x5e>
	}
 8005674:	bf00      	nop
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005682:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <prvResetNextTaskUnblockTime+0x38>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800568c:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <prvResetNextTaskUnblockTime+0x3c>)
 800568e:	f04f 32ff 	mov.w	r2, #4294967295
 8005692:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005694:	e008      	b.n	80056a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005696:	4b07      	ldr	r3, [pc, #28]	; (80056b4 <prvResetNextTaskUnblockTime+0x38>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4a04      	ldr	r2, [pc, #16]	; (80056b8 <prvResetNextTaskUnblockTime+0x3c>)
 80056a6:	6013      	str	r3, [r2, #0]
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	200009f8 	.word	0x200009f8
 80056b8:	20000a60 	.word	0x20000a60

080056bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80056c2:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <xTaskGetSchedulerState+0x34>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80056ca:	2301      	movs	r3, #1
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	e008      	b.n	80056e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d0:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <xTaskGetSchedulerState+0x38>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80056d8:	2302      	movs	r3, #2
 80056da:	607b      	str	r3, [r7, #4]
 80056dc:	e001      	b.n	80056e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80056de:	2300      	movs	r3, #0
 80056e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80056e2:	687b      	ldr	r3, [r7, #4]
	}
 80056e4:	4618      	mov	r0, r3
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	20000a4c 	.word	0x20000a4c
 80056f4:	20000a68 	.word	0x20000a68

080056f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d056      	beq.n	80057bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800570e:	4b2e      	ldr	r3, [pc, #184]	; (80057c8 <xTaskPriorityDisinherit+0xd0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	429a      	cmp	r2, r3
 8005716:	d00a      	beq.n	800572e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	60fb      	str	r3, [r7, #12]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	60bb      	str	r3, [r7, #8]
}
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005750:	1e5a      	subs	r2, r3, #1
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575e:	429a      	cmp	r2, r3
 8005760:	d02c      	beq.n	80057bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005766:	2b00      	cmp	r3, #0
 8005768:	d128      	bne.n	80057bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	3304      	adds	r3, #4
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe fc46 	bl	8004000 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <xTaskPriorityDisinherit+0xd4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d903      	bls.n	800579c <xTaskPriorityDisinherit+0xa4>
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	4a0c      	ldr	r2, [pc, #48]	; (80057cc <xTaskPriorityDisinherit+0xd4>)
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <xTaskPriorityDisinherit+0xd8>)
 80057aa:	441a      	add	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f7fe fbc7 	bl	8003f46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057bc:	697b      	ldr	r3, [r7, #20]
	}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	2000056c 	.word	0x2000056c
 80057cc:	20000a48 	.word	0x20000a48
 80057d0:	20000570 	.word	0x20000570

080057d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057de:	4b21      	ldr	r3, [pc, #132]	; (8005864 <prvAddCurrentTaskToDelayedList+0x90>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057e4:	4b20      	ldr	r3, [pc, #128]	; (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fc08 	bl	8004000 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d10a      	bne.n	800580e <prvAddCurrentTaskToDelayedList+0x3a>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057fe:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3304      	adds	r3, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4819      	ldr	r0, [pc, #100]	; (800586c <prvAddCurrentTaskToDelayedList+0x98>)
 8005808:	f7fe fb9d 	bl	8003f46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800580c:	e026      	b.n	800585c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4413      	add	r3, r2
 8005814:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005816:	4b14      	ldr	r3, [pc, #80]	; (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	429a      	cmp	r2, r3
 8005824:	d209      	bcs.n	800583a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005826:	4b12      	ldr	r3, [pc, #72]	; (8005870 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3304      	adds	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f7fe fbab 	bl	8003f8e <vListInsert>
}
 8005838:	e010      	b.n	800585c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800583a:	4b0e      	ldr	r3, [pc, #56]	; (8005874 <prvAddCurrentTaskToDelayedList+0xa0>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <prvAddCurrentTaskToDelayedList+0x94>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3304      	adds	r3, #4
 8005844:	4619      	mov	r1, r3
 8005846:	4610      	mov	r0, r2
 8005848:	f7fe fba1 	bl	8003f8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <prvAddCurrentTaskToDelayedList+0xa4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	429a      	cmp	r2, r3
 8005854:	d202      	bcs.n	800585c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005856:	4a08      	ldr	r2, [pc, #32]	; (8005878 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6013      	str	r3, [r2, #0]
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000a44 	.word	0x20000a44
 8005868:	2000056c 	.word	0x2000056c
 800586c:	20000a2c 	.word	0x20000a2c
 8005870:	200009fc 	.word	0x200009fc
 8005874:	200009f8 	.word	0x200009f8
 8005878:	20000a60 	.word	0x20000a60

0800587c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005886:	f000 fb07 	bl	8005e98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800588a:	4b1c      	ldr	r3, [pc, #112]	; (80058fc <xTimerCreateTimerTask+0x80>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d021      	beq.n	80058d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800589a:	1d3a      	adds	r2, r7, #4
 800589c:	f107 0108 	add.w	r1, r7, #8
 80058a0:	f107 030c 	add.w	r3, r7, #12
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fe fb07 	bl	8003eb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	9202      	str	r2, [sp, #8]
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	2302      	movs	r3, #2
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	2300      	movs	r3, #0
 80058ba:	460a      	mov	r2, r1
 80058bc:	4910      	ldr	r1, [pc, #64]	; (8005900 <xTimerCreateTimerTask+0x84>)
 80058be:	4811      	ldr	r0, [pc, #68]	; (8005904 <xTimerCreateTimerTask+0x88>)
 80058c0:	f7ff f8b4 	bl	8004a2c <xTaskCreateStatic>
 80058c4:	4603      	mov	r3, r0
 80058c6:	4a10      	ldr	r2, [pc, #64]	; (8005908 <xTimerCreateTimerTask+0x8c>)
 80058c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80058ca:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <xTimerCreateTimerTask+0x8c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80058d2:	2301      	movs	r3, #1
 80058d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	613b      	str	r3, [r7, #16]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80058f2:	697b      	ldr	r3, [r7, #20]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20000a9c 	.word	0x20000a9c
 8005900:	08006aac 	.word	0x08006aac
 8005904:	08005a41 	.word	0x08005a41
 8005908:	20000aa0 	.word	0x20000aa0

0800590c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08a      	sub	sp, #40	; 0x28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800591a:	2300      	movs	r3, #0
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	623b      	str	r3, [r7, #32]
}
 8005936:	bf00      	nop
 8005938:	e7fe      	b.n	8005938 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800593a:	4b1a      	ldr	r3, [pc, #104]	; (80059a4 <xTimerGenericCommand+0x98>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d02a      	beq.n	8005998 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b05      	cmp	r3, #5
 8005952:	dc18      	bgt.n	8005986 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005954:	f7ff feb2 	bl	80056bc <xTaskGetSchedulerState>
 8005958:	4603      	mov	r3, r0
 800595a:	2b02      	cmp	r3, #2
 800595c:	d109      	bne.n	8005972 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800595e:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <xTimerGenericCommand+0x98>)
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	f107 0110 	add.w	r1, r7, #16
 8005966:	2300      	movs	r3, #0
 8005968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800596a:	f7fe fc77 	bl	800425c <xQueueGenericSend>
 800596e:	6278      	str	r0, [r7, #36]	; 0x24
 8005970:	e012      	b.n	8005998 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005972:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <xTimerGenericCommand+0x98>)
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	f107 0110 	add.w	r1, r7, #16
 800597a:	2300      	movs	r3, #0
 800597c:	2200      	movs	r2, #0
 800597e:	f7fe fc6d 	bl	800425c <xQueueGenericSend>
 8005982:	6278      	str	r0, [r7, #36]	; 0x24
 8005984:	e008      	b.n	8005998 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005986:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <xTimerGenericCommand+0x98>)
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	f107 0110 	add.w	r1, r7, #16
 800598e:	2300      	movs	r3, #0
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	f7fe fd61 	bl	8004458 <xQueueGenericSendFromISR>
 8005996:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800599a:	4618      	mov	r0, r3
 800599c:	3728      	adds	r7, #40	; 0x28
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000a9c 	.word	0x20000a9c

080059a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b088      	sub	sp, #32
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059b2:	4b22      	ldr	r3, [pc, #136]	; (8005a3c <prvProcessExpiredTimer+0x94>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	3304      	adds	r3, #4
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fe fb1d 	bl	8004000 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d022      	beq.n	8005a1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	699a      	ldr	r2, [r3, #24]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	18d1      	adds	r1, r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	6978      	ldr	r0, [r7, #20]
 80059e2:	f000 f8d1 	bl	8005b88 <prvInsertTimerInActiveList>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01f      	beq.n	8005a2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059ec:	2300      	movs	r3, #0
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	2300      	movs	r3, #0
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	2100      	movs	r1, #0
 80059f6:	6978      	ldr	r0, [r7, #20]
 80059f8:	f7ff ff88 	bl	800590c <xTimerGenericCommand>
 80059fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d113      	bne.n	8005a2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	60fb      	str	r3, [r7, #12]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a20:	f023 0301 	bic.w	r3, r3, #1
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	6978      	ldr	r0, [r7, #20]
 8005a32:	4798      	blx	r3
}
 8005a34:	bf00      	nop
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000a94 	.word	0x20000a94

08005a40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a48:	f107 0308 	add.w	r3, r7, #8
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 f857 	bl	8005b00 <prvGetNextExpireTime>
 8005a52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4619      	mov	r1, r3
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f803 	bl	8005a64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005a5e:	f000 f8d5 	bl	8005c0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005a62:	e7f1      	b.n	8005a48 <prvTimerTask+0x8>

08005a64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a6e:	f7ff fa39 	bl	8004ee4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a72:	f107 0308 	add.w	r3, r7, #8
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 f866 	bl	8005b48 <prvSampleTimeNow>
 8005a7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d130      	bne.n	8005ae6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10a      	bne.n	8005aa0 <prvProcessTimerOrBlockTask+0x3c>
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d806      	bhi.n	8005aa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a92:	f7ff fa35 	bl	8004f00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a96:	68f9      	ldr	r1, [r7, #12]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff ff85 	bl	80059a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a9e:	e024      	b.n	8005aea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d008      	beq.n	8005ab8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005aa6:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <prvProcessTimerOrBlockTask+0x90>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <prvProcessTimerOrBlockTask+0x50>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e000      	b.n	8005ab6 <prvProcessTimerOrBlockTask+0x52>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ab8:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <prvProcessTimerOrBlockTask+0x94>)
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f7fe ff7d 	bl	80049c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005aca:	f7ff fa19 	bl	8004f00 <xTaskResumeAll>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10a      	bne.n	8005aea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ad4:	4b09      	ldr	r3, [pc, #36]	; (8005afc <prvProcessTimerOrBlockTask+0x98>)
 8005ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	f3bf 8f6f 	isb	sy
}
 8005ae4:	e001      	b.n	8005aea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005ae6:	f7ff fa0b 	bl	8004f00 <xTaskResumeAll>
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000a98 	.word	0x20000a98
 8005af8:	20000a9c 	.word	0x20000a9c
 8005afc:	e000ed04 	.word	0xe000ed04

08005b00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <prvGetNextExpireTime+0x44>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <prvGetNextExpireTime+0x16>
 8005b12:	2201      	movs	r2, #1
 8005b14:	e000      	b.n	8005b18 <prvGetNextExpireTime+0x18>
 8005b16:	2200      	movs	r2, #0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d105      	bne.n	8005b30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b24:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <prvGetNextExpireTime+0x44>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	e001      	b.n	8005b34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005b34:	68fb      	ldr	r3, [r7, #12]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000a94 	.word	0x20000a94

08005b48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005b50:	f7ff fa74 	bl	800503c <xTaskGetTickCount>
 8005b54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <prvSampleTimeNow+0x3c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d205      	bcs.n	8005b6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005b60:	f000 f936 	bl	8005dd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e002      	b.n	8005b72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b72:	4a04      	ldr	r2, [pc, #16]	; (8005b84 <prvSampleTimeNow+0x3c>)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b78:	68fb      	ldr	r3, [r7, #12]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000aa4 	.word	0x20000aa4

08005b88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d812      	bhi.n	8005bd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	1ad2      	subs	r2, r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d302      	bcc.n	8005bc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	e01b      	b.n	8005bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005bc2:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <prvInsertTimerInActiveList+0x7c>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3304      	adds	r3, #4
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4610      	mov	r0, r2
 8005bce:	f7fe f9de 	bl	8003f8e <vListInsert>
 8005bd2:	e012      	b.n	8005bfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d206      	bcs.n	8005bea <prvInsertTimerInActiveList+0x62>
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d302      	bcc.n	8005bea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005be4:	2301      	movs	r3, #1
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	e007      	b.n	8005bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <prvInsertTimerInActiveList+0x80>)
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	f7fe f9ca 	bl	8003f8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005bfa:	697b      	ldr	r3, [r7, #20]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	20000a98 	.word	0x20000a98
 8005c08:	20000a94 	.word	0x20000a94

08005c0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08e      	sub	sp, #56	; 0x38
 8005c10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c12:	e0ca      	b.n	8005daa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	da18      	bge.n	8005c4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c1a:	1d3b      	adds	r3, r7, #4
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10a      	bne.n	8005c3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	61fb      	str	r3, [r7, #28]
}
 8005c38:	bf00      	nop
 8005c3a:	e7fe      	b.n	8005c3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c42:	6850      	ldr	r0, [r2, #4]
 8005c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c46:	6892      	ldr	r2, [r2, #8]
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f2c0 80aa 	blt.w	8005da8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c62:	3304      	adds	r3, #4
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fe f9cb 	bl	8004000 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff ff6b 	bl	8005b48 <prvSampleTimeNow>
 8005c72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b09      	cmp	r3, #9
 8005c78:	f200 8097 	bhi.w	8005daa <prvProcessReceivedCommands+0x19e>
 8005c7c:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <prvProcessReceivedCommands+0x78>)
 8005c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c82:	bf00      	nop
 8005c84:	08005cad 	.word	0x08005cad
 8005c88:	08005cad 	.word	0x08005cad
 8005c8c:	08005cad 	.word	0x08005cad
 8005c90:	08005d21 	.word	0x08005d21
 8005c94:	08005d35 	.word	0x08005d35
 8005c98:	08005d7f 	.word	0x08005d7f
 8005c9c:	08005cad 	.word	0x08005cad
 8005ca0:	08005cad 	.word	0x08005cad
 8005ca4:	08005d21 	.word	0x08005d21
 8005ca8:	08005d35 	.word	0x08005d35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	18d1      	adds	r1, r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ccc:	f7ff ff5c 	bl	8005b88 <prvInsertTimerInActiveList>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d069      	beq.n	8005daa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d05e      	beq.n	8005daa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	441a      	add	r2, r3
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cfe:	f7ff fe05 	bl	800590c <xTimerGenericCommand>
 8005d02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d14f      	bne.n	8005daa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	61bb      	str	r3, [r7, #24]
}
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005d32:	e03a      	b.n	8005daa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d3a:	f043 0301 	orr.w	r3, r3, #1
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	617b      	str	r3, [r7, #20]
}
 8005d66:	bf00      	nop
 8005d68:	e7fe      	b.n	8005d68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	18d1      	adds	r1, r2, r3
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d78:	f7ff ff06 	bl	8005b88 <prvInsertTimerInActiveList>
					break;
 8005d7c:	e015      	b.n	8005daa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d103      	bne.n	8005d94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d8e:	f000 fbdf 	bl	8006550 <vPortFree>
 8005d92:	e00a      	b.n	8005daa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d9a:	f023 0301 	bic.w	r3, r3, #1
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005da6:	e000      	b.n	8005daa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005da8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005daa:	4b08      	ldr	r3, [pc, #32]	; (8005dcc <prvProcessReceivedCommands+0x1c0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	1d39      	adds	r1, r7, #4
 8005db0:	2200      	movs	r2, #0
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe fbec 	bl	8004590 <xQueueReceive>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f47f af2a 	bne.w	8005c14 <prvProcessReceivedCommands+0x8>
	}
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	3730      	adds	r7, #48	; 0x30
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000a9c 	.word	0x20000a9c

08005dd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dd6:	e048      	b.n	8005e6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005dd8:	4b2d      	ldr	r3, [pc, #180]	; (8005e90 <prvSwitchTimerLists+0xc0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de2:	4b2b      	ldr	r3, [pc, #172]	; (8005e90 <prvSwitchTimerLists+0xc0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fe f905 	bl	8004000 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d02e      	beq.n	8005e6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4413      	add	r3, r2
 8005e14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d90e      	bls.n	8005e3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e2a:	4b19      	ldr	r3, [pc, #100]	; (8005e90 <prvSwitchTimerLists+0xc0>)
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3304      	adds	r3, #4
 8005e32:	4619      	mov	r1, r3
 8005e34:	4610      	mov	r0, r2
 8005e36:	f7fe f8aa 	bl	8003f8e <vListInsert>
 8005e3a:	e016      	b.n	8005e6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	2300      	movs	r3, #0
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	2100      	movs	r1, #0
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f7ff fd60 	bl	800590c <xTimerGenericCommand>
 8005e4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	603b      	str	r3, [r7, #0]
}
 8005e66:	bf00      	nop
 8005e68:	e7fe      	b.n	8005e68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <prvSwitchTimerLists+0xc0>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1b1      	bne.n	8005dd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e74:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <prvSwitchTimerLists+0xc0>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e7a:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <prvSwitchTimerLists+0xc4>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a04      	ldr	r2, [pc, #16]	; (8005e90 <prvSwitchTimerLists+0xc0>)
 8005e80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e82:	4a04      	ldr	r2, [pc, #16]	; (8005e94 <prvSwitchTimerLists+0xc4>)
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	6013      	str	r3, [r2, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20000a94 	.word	0x20000a94
 8005e94:	20000a98 	.word	0x20000a98

08005e98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e9e:	f000 f969 	bl	8006174 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ea2:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <prvCheckForValidListAndQueue+0x60>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d120      	bne.n	8005eec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005eaa:	4814      	ldr	r0, [pc, #80]	; (8005efc <prvCheckForValidListAndQueue+0x64>)
 8005eac:	f7fe f81e 	bl	8003eec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005eb0:	4813      	ldr	r0, [pc, #76]	; (8005f00 <prvCheckForValidListAndQueue+0x68>)
 8005eb2:	f7fe f81b 	bl	8003eec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005eb6:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <prvCheckForValidListAndQueue+0x6c>)
 8005eb8:	4a10      	ldr	r2, [pc, #64]	; (8005efc <prvCheckForValidListAndQueue+0x64>)
 8005eba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ebc:	4b12      	ldr	r3, [pc, #72]	; (8005f08 <prvCheckForValidListAndQueue+0x70>)
 8005ebe:	4a10      	ldr	r2, [pc, #64]	; (8005f00 <prvCheckForValidListAndQueue+0x68>)
 8005ec0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	4b11      	ldr	r3, [pc, #68]	; (8005f0c <prvCheckForValidListAndQueue+0x74>)
 8005ec8:	4a11      	ldr	r2, [pc, #68]	; (8005f10 <prvCheckForValidListAndQueue+0x78>)
 8005eca:	2110      	movs	r1, #16
 8005ecc:	200a      	movs	r0, #10
 8005ece:	f7fe f929 	bl	8004124 <xQueueGenericCreateStatic>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4a08      	ldr	r2, [pc, #32]	; (8005ef8 <prvCheckForValidListAndQueue+0x60>)
 8005ed6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ed8:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <prvCheckForValidListAndQueue+0x60>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ee0:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <prvCheckForValidListAndQueue+0x60>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	490b      	ldr	r1, [pc, #44]	; (8005f14 <prvCheckForValidListAndQueue+0x7c>)
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fe fd42 	bl	8004970 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005eec:	f000 f972 	bl	80061d4 <vPortExitCritical>
}
 8005ef0:	bf00      	nop
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000a9c 	.word	0x20000a9c
 8005efc:	20000a6c 	.word	0x20000a6c
 8005f00:	20000a80 	.word	0x20000a80
 8005f04:	20000a94 	.word	0x20000a94
 8005f08:	20000a98 	.word	0x20000a98
 8005f0c:	20000b48 	.word	0x20000b48
 8005f10:	20000aa8 	.word	0x20000aa8
 8005f14:	08006ab4 	.word	0x08006ab4

08005f18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3b04      	subs	r3, #4
 8005f28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3b04      	subs	r3, #4
 8005f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f023 0201 	bic.w	r2, r3, #1
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	3b04      	subs	r3, #4
 8005f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f48:	4a0c      	ldr	r2, [pc, #48]	; (8005f7c <pxPortInitialiseStack+0x64>)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3b14      	subs	r3, #20
 8005f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3b04      	subs	r3, #4
 8005f5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f06f 0202 	mvn.w	r2, #2
 8005f66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	3b20      	subs	r3, #32
 8005f6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	08005f81 	.word	0x08005f81

08005f80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f8a:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <prvTaskExitError+0x54>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f92:	d00a      	beq.n	8005faa <prvTaskExitError+0x2a>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	60fb      	str	r3, [r7, #12]
}
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <prvTaskExitError+0x28>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	60bb      	str	r3, [r7, #8]
}
 8005fbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fbe:	bf00      	nop
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0fc      	beq.n	8005fc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fc6:	bf00      	nop
 8005fc8:	bf00      	nop
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	20000014 	.word	0x20000014
	...

08005fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <pxCurrentTCBConst2>)
 8005fe2:	6819      	ldr	r1, [r3, #0]
 8005fe4:	6808      	ldr	r0, [r1, #0]
 8005fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fea:	f380 8809 	msr	PSP, r0
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f04f 0000 	mov.w	r0, #0
 8005ff6:	f380 8811 	msr	BASEPRI, r0
 8005ffa:	4770      	bx	lr
 8005ffc:	f3af 8000 	nop.w

08006000 <pxCurrentTCBConst2>:
 8006000:	2000056c 	.word	0x2000056c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop

08006008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006008:	4808      	ldr	r0, [pc, #32]	; (800602c <prvPortStartFirstTask+0x24>)
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	6800      	ldr	r0, [r0, #0]
 800600e:	f380 8808 	msr	MSP, r0
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f380 8814 	msr	CONTROL, r0
 800601a:	b662      	cpsie	i
 800601c:	b661      	cpsie	f
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	df00      	svc	0
 8006028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800602a:	bf00      	nop
 800602c:	e000ed08 	.word	0xe000ed08

08006030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006036:	4b46      	ldr	r3, [pc, #280]	; (8006150 <xPortStartScheduler+0x120>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a46      	ldr	r2, [pc, #280]	; (8006154 <xPortStartScheduler+0x124>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d10a      	bne.n	8006056 <xPortStartScheduler+0x26>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	613b      	str	r3, [r7, #16]
}
 8006052:	bf00      	nop
 8006054:	e7fe      	b.n	8006054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006056:	4b3e      	ldr	r3, [pc, #248]	; (8006150 <xPortStartScheduler+0x120>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a3f      	ldr	r2, [pc, #252]	; (8006158 <xPortStartScheduler+0x128>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d10a      	bne.n	8006076 <xPortStartScheduler+0x46>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	60fb      	str	r3, [r7, #12]
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006076:	4b39      	ldr	r3, [pc, #228]	; (800615c <xPortStartScheduler+0x12c>)
 8006078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	22ff      	movs	r2, #255	; 0xff
 8006086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006098:	b2da      	uxtb	r2, r3
 800609a:	4b31      	ldr	r3, [pc, #196]	; (8006160 <xPortStartScheduler+0x130>)
 800609c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800609e:	4b31      	ldr	r3, [pc, #196]	; (8006164 <xPortStartScheduler+0x134>)
 80060a0:	2207      	movs	r2, #7
 80060a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060a4:	e009      	b.n	80060ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060a6:	4b2f      	ldr	r3, [pc, #188]	; (8006164 <xPortStartScheduler+0x134>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	4a2d      	ldr	r2, [pc, #180]	; (8006164 <xPortStartScheduler+0x134>)
 80060ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b80      	cmp	r3, #128	; 0x80
 80060c4:	d0ef      	beq.n	80060a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060c6:	4b27      	ldr	r3, [pc, #156]	; (8006164 <xPortStartScheduler+0x134>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f1c3 0307 	rsb	r3, r3, #7
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d00a      	beq.n	80060e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	60bb      	str	r3, [r7, #8]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060e8:	4b1e      	ldr	r3, [pc, #120]	; (8006164 <xPortStartScheduler+0x134>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	021b      	lsls	r3, r3, #8
 80060ee:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <xPortStartScheduler+0x134>)
 80060f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060f2:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <xPortStartScheduler+0x134>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060fa:	4a1a      	ldr	r2, [pc, #104]	; (8006164 <xPortStartScheduler+0x134>)
 80060fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	b2da      	uxtb	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006106:	4b18      	ldr	r3, [pc, #96]	; (8006168 <xPortStartScheduler+0x138>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a17      	ldr	r2, [pc, #92]	; (8006168 <xPortStartScheduler+0x138>)
 800610c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006112:	4b15      	ldr	r3, [pc, #84]	; (8006168 <xPortStartScheduler+0x138>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a14      	ldr	r2, [pc, #80]	; (8006168 <xPortStartScheduler+0x138>)
 8006118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800611c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800611e:	f000 f8dd 	bl	80062dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006122:	4b12      	ldr	r3, [pc, #72]	; (800616c <xPortStartScheduler+0x13c>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006128:	f000 f8fc 	bl	8006324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800612c:	4b10      	ldr	r3, [pc, #64]	; (8006170 <xPortStartScheduler+0x140>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0f      	ldr	r2, [pc, #60]	; (8006170 <xPortStartScheduler+0x140>)
 8006132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006138:	f7ff ff66 	bl	8006008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800613c:	f7ff f848 	bl	80051d0 <vTaskSwitchContext>
	prvTaskExitError();
 8006140:	f7ff ff1e 	bl	8005f80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	e000ed00 	.word	0xe000ed00
 8006154:	410fc271 	.word	0x410fc271
 8006158:	410fc270 	.word	0x410fc270
 800615c:	e000e400 	.word	0xe000e400
 8006160:	20000b98 	.word	0x20000b98
 8006164:	20000b9c 	.word	0x20000b9c
 8006168:	e000ed20 	.word	0xe000ed20
 800616c:	20000014 	.word	0x20000014
 8006170:	e000ef34 	.word	0xe000ef34

08006174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	607b      	str	r3, [r7, #4]
}
 800618c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800618e:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <vPortEnterCritical+0x58>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	4a0d      	ldr	r2, [pc, #52]	; (80061cc <vPortEnterCritical+0x58>)
 8006196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006198:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <vPortEnterCritical+0x58>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10f      	bne.n	80061c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <vPortEnterCritical+0x5c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	603b      	str	r3, [r7, #0]
}
 80061bc:	bf00      	nop
 80061be:	e7fe      	b.n	80061be <vPortEnterCritical+0x4a>
	}
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	20000014 	.word	0x20000014
 80061d0:	e000ed04 	.word	0xe000ed04

080061d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061da:	4b12      	ldr	r3, [pc, #72]	; (8006224 <vPortExitCritical+0x50>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <vPortExitCritical+0x24>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	607b      	str	r3, [r7, #4]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80061f8:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <vPortExitCritical+0x50>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	4a09      	ldr	r2, [pc, #36]	; (8006224 <vPortExitCritical+0x50>)
 8006200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006202:	4b08      	ldr	r3, [pc, #32]	; (8006224 <vPortExitCritical+0x50>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d105      	bne.n	8006216 <vPortExitCritical+0x42>
 800620a:	2300      	movs	r3, #0
 800620c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	f383 8811 	msr	BASEPRI, r3
}
 8006214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20000014 	.word	0x20000014
	...

08006230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006230:	f3ef 8009 	mrs	r0, PSP
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	4b15      	ldr	r3, [pc, #84]	; (8006290 <pxCurrentTCBConst>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	f01e 0f10 	tst.w	lr, #16
 8006240:	bf08      	it	eq
 8006242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624a:	6010      	str	r0, [r2, #0]
 800624c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006254:	f380 8811 	msr	BASEPRI, r0
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f7fe ffb6 	bl	80051d0 <vTaskSwitchContext>
 8006264:	f04f 0000 	mov.w	r0, #0
 8006268:	f380 8811 	msr	BASEPRI, r0
 800626c:	bc09      	pop	{r0, r3}
 800626e:	6819      	ldr	r1, [r3, #0]
 8006270:	6808      	ldr	r0, [r1, #0]
 8006272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006276:	f01e 0f10 	tst.w	lr, #16
 800627a:	bf08      	it	eq
 800627c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006280:	f380 8809 	msr	PSP, r0
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst>:
 8006290:	2000056c 	.word	0x2000056c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	607b      	str	r3, [r7, #4]
}
 80062b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062b2:	f7fe fed3 	bl	800505c <xTaskIncrementTick>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <xPortSysTickHandler+0x40>)
 80062be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	2300      	movs	r3, #0
 80062c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f383 8811 	msr	BASEPRI, r3
}
 80062ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <vPortSetupTimerInterrupt+0x34>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <vPortSetupTimerInterrupt+0x38>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <vPortSetupTimerInterrupt+0x3c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a0a      	ldr	r2, [pc, #40]	; (800631c <vPortSetupTimerInterrupt+0x40>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	099b      	lsrs	r3, r3, #6
 80062f8:	4a09      	ldr	r2, [pc, #36]	; (8006320 <vPortSetupTimerInterrupt+0x44>)
 80062fa:	3b01      	subs	r3, #1
 80062fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80062fe:	4b04      	ldr	r3, [pc, #16]	; (8006310 <vPortSetupTimerInterrupt+0x34>)
 8006300:	2207      	movs	r2, #7
 8006302:	601a      	str	r2, [r3, #0]
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	e000e010 	.word	0xe000e010
 8006314:	e000e018 	.word	0xe000e018
 8006318:	20000008 	.word	0x20000008
 800631c:	10624dd3 	.word	0x10624dd3
 8006320:	e000e014 	.word	0xe000e014

08006324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006334 <vPortEnableVFP+0x10>
 8006328:	6801      	ldr	r1, [r0, #0]
 800632a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800632e:	6001      	str	r1, [r0, #0]
 8006330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006332:	bf00      	nop
 8006334:	e000ed88 	.word	0xe000ed88

08006338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800633e:	f3ef 8305 	mrs	r3, IPSR
 8006342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b0f      	cmp	r3, #15
 8006348:	d914      	bls.n	8006374 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800634a:	4a17      	ldr	r2, [pc, #92]	; (80063a8 <vPortValidateInterruptPriority+0x70>)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006354:	4b15      	ldr	r3, [pc, #84]	; (80063ac <vPortValidateInterruptPriority+0x74>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	7afa      	ldrb	r2, [r7, #11]
 800635a:	429a      	cmp	r2, r3
 800635c:	d20a      	bcs.n	8006374 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	607b      	str	r3, [r7, #4]
}
 8006370:	bf00      	nop
 8006372:	e7fe      	b.n	8006372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006374:	4b0e      	ldr	r3, [pc, #56]	; (80063b0 <vPortValidateInterruptPriority+0x78>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800637c:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <vPortValidateInterruptPriority+0x7c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d90a      	bls.n	800639a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	603b      	str	r3, [r7, #0]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <vPortValidateInterruptPriority+0x60>
	}
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	e000e3f0 	.word	0xe000e3f0
 80063ac:	20000b98 	.word	0x20000b98
 80063b0:	e000ed0c 	.word	0xe000ed0c
 80063b4:	20000b9c 	.word	0x20000b9c

080063b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08a      	sub	sp, #40	; 0x28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063c4:	f7fe fd8e 	bl	8004ee4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063c8:	4b5b      	ldr	r3, [pc, #364]	; (8006538 <pvPortMalloc+0x180>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063d0:	f000 f920 	bl	8006614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063d4:	4b59      	ldr	r3, [pc, #356]	; (800653c <pvPortMalloc+0x184>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4013      	ands	r3, r2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 8093 	bne.w	8006508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01d      	beq.n	8006424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063e8:	2208      	movs	r2, #8
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4413      	add	r3, r2
 80063ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d014      	beq.n	8006424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f023 0307 	bic.w	r3, r3, #7
 8006400:	3308      	adds	r3, #8
 8006402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <pvPortMalloc+0x6c>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	617b      	str	r3, [r7, #20]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d06e      	beq.n	8006508 <pvPortMalloc+0x150>
 800642a:	4b45      	ldr	r3, [pc, #276]	; (8006540 <pvPortMalloc+0x188>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	429a      	cmp	r2, r3
 8006432:	d869      	bhi.n	8006508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006434:	4b43      	ldr	r3, [pc, #268]	; (8006544 <pvPortMalloc+0x18c>)
 8006436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006438:	4b42      	ldr	r3, [pc, #264]	; (8006544 <pvPortMalloc+0x18c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800643e:	e004      	b.n	800644a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	429a      	cmp	r2, r3
 8006452:	d903      	bls.n	800645c <pvPortMalloc+0xa4>
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f1      	bne.n	8006440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800645c:	4b36      	ldr	r3, [pc, #216]	; (8006538 <pvPortMalloc+0x180>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006462:	429a      	cmp	r2, r3
 8006464:	d050      	beq.n	8006508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2208      	movs	r2, #8
 800646c:	4413      	add	r3, r2
 800646e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	1ad2      	subs	r2, r2, r3
 8006480:	2308      	movs	r3, #8
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	429a      	cmp	r2, r3
 8006486:	d91f      	bls.n	80064c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4413      	add	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <pvPortMalloc+0xf8>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	613b      	str	r3, [r7, #16]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	1ad2      	subs	r2, r2, r3
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064c2:	69b8      	ldr	r0, [r7, #24]
 80064c4:	f000 f908 	bl	80066d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <pvPortMalloc+0x188>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	4a1b      	ldr	r2, [pc, #108]	; (8006540 <pvPortMalloc+0x188>)
 80064d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064d6:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <pvPortMalloc+0x188>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	4b1b      	ldr	r3, [pc, #108]	; (8006548 <pvPortMalloc+0x190>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d203      	bcs.n	80064ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064e2:	4b17      	ldr	r3, [pc, #92]	; (8006540 <pvPortMalloc+0x188>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a18      	ldr	r2, [pc, #96]	; (8006548 <pvPortMalloc+0x190>)
 80064e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <pvPortMalloc+0x184>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064fe:	4b13      	ldr	r3, [pc, #76]	; (800654c <pvPortMalloc+0x194>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3301      	adds	r3, #1
 8006504:	4a11      	ldr	r2, [pc, #68]	; (800654c <pvPortMalloc+0x194>)
 8006506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006508:	f7fe fcfa 	bl	8004f00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <pvPortMalloc+0x174>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	60fb      	str	r3, [r7, #12]
}
 8006528:	bf00      	nop
 800652a:	e7fe      	b.n	800652a <pvPortMalloc+0x172>
	return pvReturn;
 800652c:	69fb      	ldr	r3, [r7, #28]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3728      	adds	r7, #40	; 0x28
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	200047a8 	.word	0x200047a8
 800653c:	200047bc 	.word	0x200047bc
 8006540:	200047ac 	.word	0x200047ac
 8006544:	200047a0 	.word	0x200047a0
 8006548:	200047b0 	.word	0x200047b0
 800654c:	200047b4 	.word	0x200047b4

08006550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d04d      	beq.n	80065fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006562:	2308      	movs	r3, #8
 8006564:	425b      	negs	r3, r3
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4413      	add	r3, r2
 800656a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	4b24      	ldr	r3, [pc, #144]	; (8006608 <vPortFree+0xb8>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4013      	ands	r3, r2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <vPortFree+0x44>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	60fb      	str	r3, [r7, #12]
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <vPortFree+0x62>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	60bb      	str	r3, [r7, #8]
}
 80065ae:	bf00      	nop
 80065b0:	e7fe      	b.n	80065b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	4b14      	ldr	r3, [pc, #80]	; (8006608 <vPortFree+0xb8>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4013      	ands	r3, r2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01e      	beq.n	80065fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d11a      	bne.n	80065fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	4b0e      	ldr	r3, [pc, #56]	; (8006608 <vPortFree+0xb8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	43db      	mvns	r3, r3
 80065d2:	401a      	ands	r2, r3
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065d8:	f7fe fc84 	bl	8004ee4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	4b0a      	ldr	r3, [pc, #40]	; (800660c <vPortFree+0xbc>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4413      	add	r3, r2
 80065e6:	4a09      	ldr	r2, [pc, #36]	; (800660c <vPortFree+0xbc>)
 80065e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065ea:	6938      	ldr	r0, [r7, #16]
 80065ec:	f000 f874 	bl	80066d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065f0:	4b07      	ldr	r3, [pc, #28]	; (8006610 <vPortFree+0xc0>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3301      	adds	r3, #1
 80065f6:	4a06      	ldr	r2, [pc, #24]	; (8006610 <vPortFree+0xc0>)
 80065f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065fa:	f7fe fc81 	bl	8004f00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065fe:	bf00      	nop
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	200047bc 	.word	0x200047bc
 800660c:	200047ac 	.word	0x200047ac
 8006610:	200047b8 	.word	0x200047b8

08006614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800661a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800661e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006620:	4b27      	ldr	r3, [pc, #156]	; (80066c0 <prvHeapInit+0xac>)
 8006622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00c      	beq.n	8006648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3307      	adds	r3, #7
 8006632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0307 	bic.w	r3, r3, #7
 800663a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	4a1f      	ldr	r2, [pc, #124]	; (80066c0 <prvHeapInit+0xac>)
 8006644:	4413      	add	r3, r2
 8006646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800664c:	4a1d      	ldr	r2, [pc, #116]	; (80066c4 <prvHeapInit+0xb0>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006652:	4b1c      	ldr	r3, [pc, #112]	; (80066c4 <prvHeapInit+0xb0>)
 8006654:	2200      	movs	r2, #0
 8006656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	4413      	add	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006660:	2208      	movs	r2, #8
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0307 	bic.w	r3, r3, #7
 800666e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <prvHeapInit+0xb4>)
 8006674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006676:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <prvHeapInit+0xb4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800667e:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <prvHeapInit+0xb4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	1ad2      	subs	r2, r2, r3
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006694:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <prvHeapInit+0xb4>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <prvHeapInit+0xb8>)
 80066a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	4a09      	ldr	r2, [pc, #36]	; (80066d0 <prvHeapInit+0xbc>)
 80066aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066ac:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <prvHeapInit+0xc0>)
 80066ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066b2:	601a      	str	r2, [r3, #0]
}
 80066b4:	bf00      	nop
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	20000ba0 	.word	0x20000ba0
 80066c4:	200047a0 	.word	0x200047a0
 80066c8:	200047a8 	.word	0x200047a8
 80066cc:	200047b0 	.word	0x200047b0
 80066d0:	200047ac 	.word	0x200047ac
 80066d4:	200047bc 	.word	0x200047bc

080066d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066e0:	4b28      	ldr	r3, [pc, #160]	; (8006784 <prvInsertBlockIntoFreeList+0xac>)
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	e002      	b.n	80066ec <prvInsertBlockIntoFreeList+0x14>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d8f7      	bhi.n	80066e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	4413      	add	r3, r2
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	429a      	cmp	r2, r3
 8006706:	d108      	bne.n	800671a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	441a      	add	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	441a      	add	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d118      	bne.n	8006760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <prvInsertBlockIntoFreeList+0xb0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d00d      	beq.n	8006756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	441a      	add	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	e008      	b.n	8006768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006756:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <prvInsertBlockIntoFreeList+0xb0>)
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e003      	b.n	8006768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	429a      	cmp	r2, r3
 800676e:	d002      	beq.n	8006776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006776:	bf00      	nop
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	200047a0 	.word	0x200047a0
 8006788:	200047a8 	.word	0x200047a8

0800678c <__libc_init_array>:
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	4d0d      	ldr	r5, [pc, #52]	; (80067c4 <__libc_init_array+0x38>)
 8006790:	4c0d      	ldr	r4, [pc, #52]	; (80067c8 <__libc_init_array+0x3c>)
 8006792:	1b64      	subs	r4, r4, r5
 8006794:	10a4      	asrs	r4, r4, #2
 8006796:	2600      	movs	r6, #0
 8006798:	42a6      	cmp	r6, r4
 800679a:	d109      	bne.n	80067b0 <__libc_init_array+0x24>
 800679c:	4d0b      	ldr	r5, [pc, #44]	; (80067cc <__libc_init_array+0x40>)
 800679e:	4c0c      	ldr	r4, [pc, #48]	; (80067d0 <__libc_init_array+0x44>)
 80067a0:	f000 f952 	bl	8006a48 <_init>
 80067a4:	1b64      	subs	r4, r4, r5
 80067a6:	10a4      	asrs	r4, r4, #2
 80067a8:	2600      	movs	r6, #0
 80067aa:	42a6      	cmp	r6, r4
 80067ac:	d105      	bne.n	80067ba <__libc_init_array+0x2e>
 80067ae:	bd70      	pop	{r4, r5, r6, pc}
 80067b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b4:	4798      	blx	r3
 80067b6:	3601      	adds	r6, #1
 80067b8:	e7ee      	b.n	8006798 <__libc_init_array+0xc>
 80067ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80067be:	4798      	blx	r3
 80067c0:	3601      	adds	r6, #1
 80067c2:	e7f2      	b.n	80067aa <__libc_init_array+0x1e>
 80067c4:	08006bd8 	.word	0x08006bd8
 80067c8:	08006bd8 	.word	0x08006bd8
 80067cc:	08006bd8 	.word	0x08006bd8
 80067d0:	08006bdc 	.word	0x08006bdc

080067d4 <__itoa>:
 80067d4:	1e93      	subs	r3, r2, #2
 80067d6:	2b22      	cmp	r3, #34	; 0x22
 80067d8:	b510      	push	{r4, lr}
 80067da:	460c      	mov	r4, r1
 80067dc:	d904      	bls.n	80067e8 <__itoa+0x14>
 80067de:	2300      	movs	r3, #0
 80067e0:	700b      	strb	r3, [r1, #0]
 80067e2:	461c      	mov	r4, r3
 80067e4:	4620      	mov	r0, r4
 80067e6:	bd10      	pop	{r4, pc}
 80067e8:	2a0a      	cmp	r2, #10
 80067ea:	d109      	bne.n	8006800 <__itoa+0x2c>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	da07      	bge.n	8006800 <__itoa+0x2c>
 80067f0:	232d      	movs	r3, #45	; 0x2d
 80067f2:	700b      	strb	r3, [r1, #0]
 80067f4:	4240      	negs	r0, r0
 80067f6:	2101      	movs	r1, #1
 80067f8:	4421      	add	r1, r4
 80067fa:	f000 f887 	bl	800690c <__utoa>
 80067fe:	e7f1      	b.n	80067e4 <__itoa+0x10>
 8006800:	2100      	movs	r1, #0
 8006802:	e7f9      	b.n	80067f8 <__itoa+0x24>

08006804 <itoa>:
 8006804:	f7ff bfe6 	b.w	80067d4 <__itoa>

08006808 <__retarget_lock_acquire_recursive>:
 8006808:	4770      	bx	lr

0800680a <__retarget_lock_release_recursive>:
 800680a:	4770      	bx	lr

0800680c <memcpy>:
 800680c:	440a      	add	r2, r1
 800680e:	4291      	cmp	r1, r2
 8006810:	f100 33ff 	add.w	r3, r0, #4294967295
 8006814:	d100      	bne.n	8006818 <memcpy+0xc>
 8006816:	4770      	bx	lr
 8006818:	b510      	push	{r4, lr}
 800681a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800681e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006822:	4291      	cmp	r1, r2
 8006824:	d1f9      	bne.n	800681a <memcpy+0xe>
 8006826:	bd10      	pop	{r4, pc}

08006828 <memset>:
 8006828:	4402      	add	r2, r0
 800682a:	4603      	mov	r3, r0
 800682c:	4293      	cmp	r3, r2
 800682e:	d100      	bne.n	8006832 <memset+0xa>
 8006830:	4770      	bx	lr
 8006832:	f803 1b01 	strb.w	r1, [r3], #1
 8006836:	e7f9      	b.n	800682c <memset+0x4>

08006838 <cleanup_glue>:
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	460c      	mov	r4, r1
 800683c:	6809      	ldr	r1, [r1, #0]
 800683e:	4605      	mov	r5, r0
 8006840:	b109      	cbz	r1, 8006846 <cleanup_glue+0xe>
 8006842:	f7ff fff9 	bl	8006838 <cleanup_glue>
 8006846:	4621      	mov	r1, r4
 8006848:	4628      	mov	r0, r5
 800684a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800684e:	f000 b8ab 	b.w	80069a8 <_free_r>
	...

08006854 <_reclaim_reent>:
 8006854:	4b2c      	ldr	r3, [pc, #176]	; (8006908 <_reclaim_reent+0xb4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4283      	cmp	r3, r0
 800685a:	b570      	push	{r4, r5, r6, lr}
 800685c:	4604      	mov	r4, r0
 800685e:	d051      	beq.n	8006904 <_reclaim_reent+0xb0>
 8006860:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006862:	b143      	cbz	r3, 8006876 <_reclaim_reent+0x22>
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d14a      	bne.n	8006900 <_reclaim_reent+0xac>
 800686a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800686c:	6819      	ldr	r1, [r3, #0]
 800686e:	b111      	cbz	r1, 8006876 <_reclaim_reent+0x22>
 8006870:	4620      	mov	r0, r4
 8006872:	f000 f899 	bl	80069a8 <_free_r>
 8006876:	6961      	ldr	r1, [r4, #20]
 8006878:	b111      	cbz	r1, 8006880 <_reclaim_reent+0x2c>
 800687a:	4620      	mov	r0, r4
 800687c:	f000 f894 	bl	80069a8 <_free_r>
 8006880:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006882:	b111      	cbz	r1, 800688a <_reclaim_reent+0x36>
 8006884:	4620      	mov	r0, r4
 8006886:	f000 f88f 	bl	80069a8 <_free_r>
 800688a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800688c:	b111      	cbz	r1, 8006894 <_reclaim_reent+0x40>
 800688e:	4620      	mov	r0, r4
 8006890:	f000 f88a 	bl	80069a8 <_free_r>
 8006894:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006896:	b111      	cbz	r1, 800689e <_reclaim_reent+0x4a>
 8006898:	4620      	mov	r0, r4
 800689a:	f000 f885 	bl	80069a8 <_free_r>
 800689e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80068a0:	b111      	cbz	r1, 80068a8 <_reclaim_reent+0x54>
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 f880 	bl	80069a8 <_free_r>
 80068a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80068aa:	b111      	cbz	r1, 80068b2 <_reclaim_reent+0x5e>
 80068ac:	4620      	mov	r0, r4
 80068ae:	f000 f87b 	bl	80069a8 <_free_r>
 80068b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80068b4:	b111      	cbz	r1, 80068bc <_reclaim_reent+0x68>
 80068b6:	4620      	mov	r0, r4
 80068b8:	f000 f876 	bl	80069a8 <_free_r>
 80068bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068be:	b111      	cbz	r1, 80068c6 <_reclaim_reent+0x72>
 80068c0:	4620      	mov	r0, r4
 80068c2:	f000 f871 	bl	80069a8 <_free_r>
 80068c6:	69a3      	ldr	r3, [r4, #24]
 80068c8:	b1e3      	cbz	r3, 8006904 <_reclaim_reent+0xb0>
 80068ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80068cc:	4620      	mov	r0, r4
 80068ce:	4798      	blx	r3
 80068d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80068d2:	b1b9      	cbz	r1, 8006904 <_reclaim_reent+0xb0>
 80068d4:	4620      	mov	r0, r4
 80068d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068da:	f7ff bfad 	b.w	8006838 <cleanup_glue>
 80068de:	5949      	ldr	r1, [r1, r5]
 80068e0:	b941      	cbnz	r1, 80068f4 <_reclaim_reent+0xa0>
 80068e2:	3504      	adds	r5, #4
 80068e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068e6:	2d80      	cmp	r5, #128	; 0x80
 80068e8:	68d9      	ldr	r1, [r3, #12]
 80068ea:	d1f8      	bne.n	80068de <_reclaim_reent+0x8a>
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 f85b 	bl	80069a8 <_free_r>
 80068f2:	e7ba      	b.n	800686a <_reclaim_reent+0x16>
 80068f4:	680e      	ldr	r6, [r1, #0]
 80068f6:	4620      	mov	r0, r4
 80068f8:	f000 f856 	bl	80069a8 <_free_r>
 80068fc:	4631      	mov	r1, r6
 80068fe:	e7ef      	b.n	80068e0 <_reclaim_reent+0x8c>
 8006900:	2500      	movs	r5, #0
 8006902:	e7ef      	b.n	80068e4 <_reclaim_reent+0x90>
 8006904:	bd70      	pop	{r4, r5, r6, pc}
 8006906:	bf00      	nop
 8006908:	20000018 	.word	0x20000018

0800690c <__utoa>:
 800690c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800690e:	4c1f      	ldr	r4, [pc, #124]	; (800698c <__utoa+0x80>)
 8006910:	b08b      	sub	sp, #44	; 0x2c
 8006912:	4605      	mov	r5, r0
 8006914:	460b      	mov	r3, r1
 8006916:	466e      	mov	r6, sp
 8006918:	f104 0c20 	add.w	ip, r4, #32
 800691c:	6820      	ldr	r0, [r4, #0]
 800691e:	6861      	ldr	r1, [r4, #4]
 8006920:	4637      	mov	r7, r6
 8006922:	c703      	stmia	r7!, {r0, r1}
 8006924:	3408      	adds	r4, #8
 8006926:	4564      	cmp	r4, ip
 8006928:	463e      	mov	r6, r7
 800692a:	d1f7      	bne.n	800691c <__utoa+0x10>
 800692c:	7921      	ldrb	r1, [r4, #4]
 800692e:	7139      	strb	r1, [r7, #4]
 8006930:	1e91      	subs	r1, r2, #2
 8006932:	6820      	ldr	r0, [r4, #0]
 8006934:	6038      	str	r0, [r7, #0]
 8006936:	2922      	cmp	r1, #34	; 0x22
 8006938:	f04f 0100 	mov.w	r1, #0
 800693c:	d904      	bls.n	8006948 <__utoa+0x3c>
 800693e:	7019      	strb	r1, [r3, #0]
 8006940:	460b      	mov	r3, r1
 8006942:	4618      	mov	r0, r3
 8006944:	b00b      	add	sp, #44	; 0x2c
 8006946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006948:	1e58      	subs	r0, r3, #1
 800694a:	4684      	mov	ip, r0
 800694c:	fbb5 f7f2 	udiv	r7, r5, r2
 8006950:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006954:	fb02 5617 	mls	r6, r2, r7, r5
 8006958:	4476      	add	r6, lr
 800695a:	460c      	mov	r4, r1
 800695c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006960:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006964:	462e      	mov	r6, r5
 8006966:	42b2      	cmp	r2, r6
 8006968:	f101 0101 	add.w	r1, r1, #1
 800696c:	463d      	mov	r5, r7
 800696e:	d9ed      	bls.n	800694c <__utoa+0x40>
 8006970:	2200      	movs	r2, #0
 8006972:	545a      	strb	r2, [r3, r1]
 8006974:	1919      	adds	r1, r3, r4
 8006976:	1aa5      	subs	r5, r4, r2
 8006978:	42aa      	cmp	r2, r5
 800697a:	dae2      	bge.n	8006942 <__utoa+0x36>
 800697c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006980:	780e      	ldrb	r6, [r1, #0]
 8006982:	7006      	strb	r6, [r0, #0]
 8006984:	3201      	adds	r2, #1
 8006986:	f801 5901 	strb.w	r5, [r1], #-1
 800698a:	e7f4      	b.n	8006976 <__utoa+0x6a>
 800698c:	08006ba8 	.word	0x08006ba8

08006990 <__malloc_lock>:
 8006990:	4801      	ldr	r0, [pc, #4]	; (8006998 <__malloc_lock+0x8>)
 8006992:	f7ff bf39 	b.w	8006808 <__retarget_lock_acquire_recursive>
 8006996:	bf00      	nop
 8006998:	200048d0 	.word	0x200048d0

0800699c <__malloc_unlock>:
 800699c:	4801      	ldr	r0, [pc, #4]	; (80069a4 <__malloc_unlock+0x8>)
 800699e:	f7ff bf34 	b.w	800680a <__retarget_lock_release_recursive>
 80069a2:	bf00      	nop
 80069a4:	200048d0 	.word	0x200048d0

080069a8 <_free_r>:
 80069a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069aa:	2900      	cmp	r1, #0
 80069ac:	d048      	beq.n	8006a40 <_free_r+0x98>
 80069ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b2:	9001      	str	r0, [sp, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f1a1 0404 	sub.w	r4, r1, #4
 80069ba:	bfb8      	it	lt
 80069bc:	18e4      	addlt	r4, r4, r3
 80069be:	f7ff ffe7 	bl	8006990 <__malloc_lock>
 80069c2:	4a20      	ldr	r2, [pc, #128]	; (8006a44 <_free_r+0x9c>)
 80069c4:	9801      	ldr	r0, [sp, #4]
 80069c6:	6813      	ldr	r3, [r2, #0]
 80069c8:	4615      	mov	r5, r2
 80069ca:	b933      	cbnz	r3, 80069da <_free_r+0x32>
 80069cc:	6063      	str	r3, [r4, #4]
 80069ce:	6014      	str	r4, [r2, #0]
 80069d0:	b003      	add	sp, #12
 80069d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069d6:	f7ff bfe1 	b.w	800699c <__malloc_unlock>
 80069da:	42a3      	cmp	r3, r4
 80069dc:	d90b      	bls.n	80069f6 <_free_r+0x4e>
 80069de:	6821      	ldr	r1, [r4, #0]
 80069e0:	1862      	adds	r2, r4, r1
 80069e2:	4293      	cmp	r3, r2
 80069e4:	bf04      	itt	eq
 80069e6:	681a      	ldreq	r2, [r3, #0]
 80069e8:	685b      	ldreq	r3, [r3, #4]
 80069ea:	6063      	str	r3, [r4, #4]
 80069ec:	bf04      	itt	eq
 80069ee:	1852      	addeq	r2, r2, r1
 80069f0:	6022      	streq	r2, [r4, #0]
 80069f2:	602c      	str	r4, [r5, #0]
 80069f4:	e7ec      	b.n	80069d0 <_free_r+0x28>
 80069f6:	461a      	mov	r2, r3
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	b10b      	cbz	r3, 8006a00 <_free_r+0x58>
 80069fc:	42a3      	cmp	r3, r4
 80069fe:	d9fa      	bls.n	80069f6 <_free_r+0x4e>
 8006a00:	6811      	ldr	r1, [r2, #0]
 8006a02:	1855      	adds	r5, r2, r1
 8006a04:	42a5      	cmp	r5, r4
 8006a06:	d10b      	bne.n	8006a20 <_free_r+0x78>
 8006a08:	6824      	ldr	r4, [r4, #0]
 8006a0a:	4421      	add	r1, r4
 8006a0c:	1854      	adds	r4, r2, r1
 8006a0e:	42a3      	cmp	r3, r4
 8006a10:	6011      	str	r1, [r2, #0]
 8006a12:	d1dd      	bne.n	80069d0 <_free_r+0x28>
 8006a14:	681c      	ldr	r4, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	6053      	str	r3, [r2, #4]
 8006a1a:	4421      	add	r1, r4
 8006a1c:	6011      	str	r1, [r2, #0]
 8006a1e:	e7d7      	b.n	80069d0 <_free_r+0x28>
 8006a20:	d902      	bls.n	8006a28 <_free_r+0x80>
 8006a22:	230c      	movs	r3, #12
 8006a24:	6003      	str	r3, [r0, #0]
 8006a26:	e7d3      	b.n	80069d0 <_free_r+0x28>
 8006a28:	6825      	ldr	r5, [r4, #0]
 8006a2a:	1961      	adds	r1, r4, r5
 8006a2c:	428b      	cmp	r3, r1
 8006a2e:	bf04      	itt	eq
 8006a30:	6819      	ldreq	r1, [r3, #0]
 8006a32:	685b      	ldreq	r3, [r3, #4]
 8006a34:	6063      	str	r3, [r4, #4]
 8006a36:	bf04      	itt	eq
 8006a38:	1949      	addeq	r1, r1, r5
 8006a3a:	6021      	streq	r1, [r4, #0]
 8006a3c:	6054      	str	r4, [r2, #4]
 8006a3e:	e7c7      	b.n	80069d0 <_free_r+0x28>
 8006a40:	b003      	add	sp, #12
 8006a42:	bd30      	pop	{r4, r5, pc}
 8006a44:	200047c0 	.word	0x200047c0

08006a48 <_init>:
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	bf00      	nop
 8006a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4e:	bc08      	pop	{r3}
 8006a50:	469e      	mov	lr, r3
 8006a52:	4770      	bx	lr

08006a54 <_fini>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	bf00      	nop
 8006a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5a:	bc08      	pop	{r3}
 8006a5c:	469e      	mov	lr, r3
 8006a5e:	4770      	bx	lr
